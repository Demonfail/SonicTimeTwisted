<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>objAbstractInput</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vk_active = false;

alpha = 0;
gyroscopeMode = false;
gyroscopeTilt = 0;

// load android-specific settings

var file = 'settings.ini';

input = 0; // 0 - touchscreen, 1 - no touchscreen
dpadMode = 0; // 0 - static, 1 - dynamic
vkalpha = 0.8;
gyroinss = 1; // use gyroscope controls in special stages
vksize = 0; // 0 - big controls, 1 - medium controls, 2 - small controls
gyromode = 1; // 0 - gyroscope simply turns the buttons no and off; 1 - pseudo-analog mode
gyro_switch_on_angle = 0.15; // angle on which the button is pressed
gyro_analog_start = 0.2; // angle from which the analog control starts
gyro_analog_end = 0.6; // angle to which the analog control goes

dpadx = 64;
dpady = 178;
bax = 364;
bay = 178;
bar = 32;
bsx = 200;
bsy = 16;
bbx = 324;
bby = 88;



if (file_exists(file)) {
    ini_open(file);
    dpadMode = ini_read_real('smartphone','dpadmode',0);
    input = ini_read_real('smartphone','input',0);
    vkalpha = ini_read_real('smartphone','vkalpha',0.8);
    gyroinss = ini_read_real('smartphone','gyroinss',1);
    vksize = ini_read_real('smartphone','vksize',0);
    dpadx = ini_read_real('smartphone','dpadx',64);
    dpady = ini_read_real('smartphone','dpady',178);
    bax = ini_read_real('smartphone','bax',364);
    bay = ini_read_real('smartphone','bay',178);
    bsx = ini_read_real('smartphone','bsx',200);
    bsy = ini_read_real('smartphone','bsy',16);
    bbx = ini_read_real('smartphone','bbx',324);
    bby = ini_read_real('smartphone','bby',88);
    gyromode = ini_read_real('smartphone','gyromode',1);
    gyro_switch_on_angle = ini_read_real('smartphone','gyro_switch_on_angle',0.15);
    gyro_analog_start = ini_read_real('smartphone','gyro_analog_start',0.1);
    gyro_analog_end = ini_read_real('smartphone','gyro_analog_end',0.6);
}


vKeyJoy_surface = surface_create(64, 64);

dpad_sectors = false;
prev_dpad_pressed = 5;
dpad_pressed = 5;
jump_pressed = false;
super_pressed = false;
start_pressed = false;
up_pressed = false;
superIsEnabled = false;

gyro_analog_timer = 0;

dynamic_state = 0;
dynamic_device = 0;
dynamic_startx = 0;
dynamic_starty = 0;

keys = ds_map_create();
ds_map_add(keys, cUP, false);
ds_map_add(keys, cDOWN, false);
ds_map_add(keys, cLEFT, false);
ds_map_add(keys, cRIGHT, false);
ds_map_add(keys, cA, false);
ds_map_add(keys, cB, false);
ds_map_add(keys, cC, false);
ds_map_add(keys, cSTART, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(keys);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make the virtual keys appear or disappear by fading
// also, synchronize touchscreen status with availability to control the character
if(vk_active)
{
    if(alpha &lt; vkalpha)
    {
        alpha += 0.05;
        if(alpha &gt; vkalpha)
        {
            alpha = vkalpha;
        }
    }
    android_manage_touchscreen_controls();
    
    // Let's see if touchscreen needs to be disabled
    // cutscene? disable. No playable character? Disable. No player flag input? Disable too
    
    if(!( (instance_exists(objPlayer) || instance_exists(objSSPlayer)) &amp;&amp; objInput.flag_player_input ))
    {
        smartphone_disable_virtual_keys();    
    }
    
    
}
if(!vk_active)
{
    if(alpha &gt; 0)
    {
        alpha -= 0.01;
        if(alpha &lt; 0)
        {
            alpha = 0;
        }
    }
    /*
    These conditions look goofy, but that's due to how
    GMS processes "OR" and "AND" conditions, this speeds
    things up a little bit.
    */
    if(objInput.flag_player_input)
    {
        if(instance_exists(objPlayer))
        {
            var enable = false;
            if(instance_exists(objLevel))
            {
                enable = objLevel.started &amp;&amp; (!objLevel.cleared);
            }
            if(enable)
            {
                smartphone_enable_virtual_keys(false);
            }
        }
        else
        if(instance_exists(objSSPlayer))
        {
            smartphone_enable_virtual_keys(true);
        }
    }
    /*
        I sruggled to figure out how the AAZ mini boss is supposed to work.
        So let's just enable the controls when the mini-boss is present and be done with it
    */
    if(instance_exists(objAA1BossController))
    {
        smartphone_enable_virtual_keys(false);
    }
}


// if gyroscope mode is on (touchscreen selected + gyroscope activated + in special stage)
// use it as left + right
if(gyroscopeMode)
{
    if(gyromode == 0)
    {
        // simple mode where tilting simply presses left and right
        var tilt = device_get_tilt_y();
        if(tilt &lt; -1*gyro_switch_on_angle)
        {
            android_vk_press(cLEFT);
        }
        else
        if(tilt &gt; gyro_switch_on_angle)
        {
            android_vk_press(cRIGHT);
        }
        else
        {
            android_vk_release(cLEFT);
            android_vk_release(cRIGHT);
        }
    }
    else
    if(gyromode == 1)
    {
        // pseudo-analog mode where depending on the tilt, left and right buttons are mashed more or less often
        var tilt = device_get_tilt_y();
        var keyToPress = cRIGHT;
        if(tilt &lt; 0)
        {
            var keyToPress = cLEFT;
        }
        tilt = abs(tilt);
        if(tilt &lt; gyro_analog_start)
        {
            android_vk_release(cLEFT);
            android_vk_release(cRIGHT);
        }
        else
        if(tilt &gt; gyro_analog_end)
        {
            android_vk_press(keyToPress);
        }
        else
        {
            gyro_analog_timer = (gyro_analog_timer + 1) mod 10;
            var tiltscale = 1 + ceil(((tilt - gyro_analog_start)/(gyro_analog_end - gyro_analog_start))*10);
            var pressed = 0;
            // the tilt scale is divided in ten segments; depending on how much the phone is tilted, the button to press
            // is mashed more or less often
            android_vk_release(cRIGHT);
            android_vk_release(cLEFT);
            switch(tiltscale)
            {
                case 1:
                    pressed = (gyro_analog_timer == 0);
                    break;
                case 2:
                    pressed = (gyro_analog_timer == 0) || (gyro_analog_timer == 5);
                    break;
                case 3:
                    pressed = (gyro_analog_timer == 3) || (gyro_analog_timer == 6) || (gyro_analog_timer == 9);
                    break;
                case 4:
                    pressed = (gyro_analog_timer == 2) || (gyro_analog_timer == 5) || (gyro_analog_timer == 7) || (gyro_analog_timer == 9);
                    break;
                case 5:
                    pressed = (gyro_analog_timer mod 2) == 1;
                    break;
                case 6:
                    pressed = (gyro_analog_timer != 2) &amp;&amp; (gyro_analog_timer != 5) &amp;&amp; (gyro_analog_timer != 7) &amp;&amp; (gyro_analog_timer != 9);
                    break;
                case 7:
                    pressed = (gyro_analog_timer != 3) &amp;&amp; (gyro_analog_timer != 6) &amp;&amp; (gyro_analog_timer != 9);
                    break;
                case 8:
                    pressed = (gyro_analog_timer != 0) &amp;&amp; (gyro_analog_timer != 5);
                    break;
                case 9:
                    pressed = (gyro_analog_timer != 0);
                    break;
            }
            if(pressed)
            {
                android_vk_press(keyToPress);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Event to trigger when touch controls are disabled</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Disable virtual controls
vk_active = false;
gyroscopeMode = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Event to trigger when touch controls are enabled</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize virtual controls.
// Must be called on every room, but also on other special occasions
// Because of this, it is now a user event

// 0 and 5 aren't technically buttons, but they're still there so that the array can function
dpad_sectors[0,0] = 0;
switch(vksize)
{
    case 0:
        dpad_sectors[1,0] = dpadx - 32;
        dpad_sectors[1,1] = dpady - 48;
        dpad_sectors[1,2] = dpadx - 48;
        dpad_sectors[1,3] = dpady - 32;
        
        dpad_sectors[2,0] = dpadx - 32;
        dpad_sectors[2,1] = dpady - 48;
        dpad_sectors[2,2] = dpadx + 32;
        dpad_sectors[2,3] = dpady - 48;
        
        dpad_sectors[3,0] = dpadx + 32;
        dpad_sectors[3,1] = dpady - 48;
        dpad_sectors[3,2] = dpadx + 48;
        dpad_sectors[3,3] = dpady - 32;
        
        dpad_sectors[4,0] = dpadx - 48;
        dpad_sectors[4,1] = dpady - 32;
        dpad_sectors[4,2] = dpadx - 48;
        dpad_sectors[4,3] = dpady + 32;
        
        dpad_sectors[5,0] = 0;
        
        dpad_sectors[6,0] = dpadx + 48;
        dpad_sectors[6,1] = dpady - 32;
        dpad_sectors[6,2] = dpadx + 48;
        dpad_sectors[6,3] = dpady + 32;
        
        dpad_sectors[7,0] = dpadx - 48;
        dpad_sectors[7,1] = dpady + 32;
        dpad_sectors[7,2] = dpadx - 32;
        dpad_sectors[7,3] = dpady + 48;
        
        dpad_sectors[8,0] = dpadx - 32;
        dpad_sectors[8,1] = dpady + 48;
        dpad_sectors[8,2] = dpadx + 32;
        dpad_sectors[8,3] = dpady + 48;
        
        dpad_sectors[9,0] = dpadx + 32;
        dpad_sectors[9,1] = dpady + 48;
        dpad_sectors[9,2] = dpadx + 48;
        dpad_sectors[9,3] = dpady + 32;
    break;
    case 1:
        dpad_sectors[1,0] = dpadx - 24;
        dpad_sectors[1,1] = dpady - 36;
        dpad_sectors[1,2] = dpadx - 36;
        dpad_sectors[1,3] = dpady - 24;
        
        dpad_sectors[2,0] = dpadx - 24;
        dpad_sectors[2,1] = dpady - 36;
        dpad_sectors[2,2] = dpadx + 24;
        dpad_sectors[2,3] = dpady - 36;
        
        dpad_sectors[3,0] = dpadx + 24;
        dpad_sectors[3,1] = dpady - 36;
        dpad_sectors[3,2] = dpadx + 36;
        dpad_sectors[3,3] = dpady - 24;
        
        dpad_sectors[4,0] = dpadx - 36;
        dpad_sectors[4,1] = dpady - 24;
        dpad_sectors[4,2] = dpadx - 36;
        dpad_sectors[4,3] = dpady + 24;
        
        dpad_sectors[5,0] = 0;
        
        dpad_sectors[6,0] = dpadx + 36;
        dpad_sectors[6,1] = dpady - 24;
        dpad_sectors[6,2] = dpadx + 36;
        dpad_sectors[6,3] = dpady + 24;
        
        dpad_sectors[7,0] = dpadx - 36;
        dpad_sectors[7,1] = dpady + 24;
        dpad_sectors[7,2] = dpadx - 24;
        dpad_sectors[7,3] = dpady + 36;
        
        dpad_sectors[8,0] = dpadx - 24;
        dpad_sectors[8,1] = dpady + 36;
        dpad_sectors[8,2] = dpadx + 24;
        dpad_sectors[8,3] = dpady + 36;
        
        dpad_sectors[9,0] = dpadx + 24;
        dpad_sectors[9,1] = dpady + 36;
        dpad_sectors[9,2] = dpadx + 36;
        dpad_sectors[9,3] = dpady + 24;
    break;
    case 2:
        dpad_sectors[1,0] = dpadx - 16;
        dpad_sectors[1,1] = dpady - 24;
        dpad_sectors[1,2] = dpadx - 24;
        dpad_sectors[1,3] = dpady - 16;
        
        dpad_sectors[2,0] = dpadx - 16;
        dpad_sectors[2,1] = dpady - 24;
        dpad_sectors[2,2] = dpadx + 16;
        dpad_sectors[2,3] = dpady - 24;
        
        dpad_sectors[3,0] = dpadx + 16;
        dpad_sectors[3,1] = dpady - 24;
        dpad_sectors[3,2] = dpadx + 24;
        dpad_sectors[3,3] = dpady - 16;
        
        dpad_sectors[4,0] = dpadx - 24;
        dpad_sectors[4,1] = dpady - 16;
        dpad_sectors[4,2] = dpadx - 24;
        dpad_sectors[4,3] = dpady + 16;
        
        dpad_sectors[5,0] = 0;
        
        dpad_sectors[6,0] = dpadx + 24;
        dpad_sectors[6,1] = dpady - 16;
        dpad_sectors[6,2] = dpadx + 24;
        dpad_sectors[6,3] = dpady + 16;
        
        dpad_sectors[7,0] = dpadx - 24;
        dpad_sectors[7,1] = dpady + 16;
        dpad_sectors[7,2] = dpadx - 16;
        dpad_sectors[7,3] = dpady + 24;
        
        dpad_sectors[8,0] = dpadx - 16;
        dpad_sectors[8,1] = dpady + 24;
        dpad_sectors[8,2] = dpadx + 16;
        dpad_sectors[8,3] = dpady + 24;
        
        dpad_sectors[9,0] = dpadx + 16;
        dpad_sectors[9,1] = dpady + 24;
        dpad_sectors[9,2] = dpadx + 24;
        dpad_sectors[9,3] = dpady + 16;
    break;
}
vk_active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(vk_active)
{
    var state = 0;
    var size = ds_map_size(keys) ;
     var key = ds_map_find_first(keys);
     for (var i = 0; i &lt; size; i++;)
     {
        if(ds_map_find_value(keys, key))
        {
            state |= key;
        }
        key = ds_map_find_next(keys, key);
     }
     objInput.state |= state;
}
else
{
    // during regular play, any click on the screen should bring up the menu
    // it's done to manage cases where a control means is not longer available
    /*
    if(instance_exists(objMenu_Android))
    {
        if(!objMenu_Android.active)
        {
            if(device_mouse_check_button_pressed(0, mb_left))
            {
                objInput.state |= cSTART;
            }
        }
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objAndroidInput</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alpha &gt; 0)
{
    if(gyroscopeMode)
    {
        if(vksize == 0)
        {
            if(android_vk_is_pressed(cUP))
            {
                draw_sprite_ext(sprTouchscreenRunButton, 1, dpadx - 32, dpady - 32, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenRunButton, 0, dpadx - 32, dpady - 32, 1, 1, 0, c_white, alpha);
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButton, 1, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButton, 0, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
            }
        }
        else
        if(vksize == 1)
        {
            if(android_vk_is_pressed(cUP))
            {
                draw_sprite_ext(sprTouchscreenRunButtonMed, 1, dpadx - 24, dpady - 24, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenRunButtonMed, 0, dpadx - 24, dpady - 24, 1, 1, 0, c_white, alpha);
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButtonMed, 1, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButtonMed, 0, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
            }
        }
        else
        if(vksize == 2)
        {
            if(android_vk_is_pressed(cUP))
            {
                draw_sprite_ext(sprTouchscreenRunButtonSmall, 1, dpadx - 16, dpady - 16, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenRunButtonSmall, 0, dpadx - 16, dpady - 16, 1, 1, 0, c_white, alpha);
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButtonSmall, 1, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButtonSmall, 0, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
            }
        }
    }
    else
    {
        var usedDpadX = dpadx;
        var usedDpadY = dpady;
        var drawDPad = (!dpadMode) || dynamic_state;
        if(dpadMode == 1)
        {
            usedDpadX = dynamic_startx;
            usedDpadY = dynamic_starty;
        }
        
        if(!surface_exists(vKeyJoy_surface))
        {
            vKeyJoy_surface = surface_create(64, 64);
        }
        if(vksize == 0)
        {
            if(drawDPad)
            {
                surface_set_target(vKeyJoy_surface);
                draw_clear_alpha(c_black, 0);
                draw_sprite(sprTouchscreenDPadBase, 0, 0, 0);
                if(android_vk_is_pressed(cUP))
                {
                    if(android_vk_is_pressed(cRIGHT))
                    {
                        draw_sprite(sprTouchscreenDPadJoy, 0, 24, 8);
                    }
                    else
                    if(android_vk_is_pressed(cLEFT))
                    {
                        draw_sprite(sprTouchscreenDPadJoy, 0, 8, 8);
                    }
                    else
                    {
                        draw_sprite(sprTouchscreenDPadJoy, 0, 16, 0);
                    }
                }
                else
                {
                    if(android_vk_is_pressed(cDOWN))
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 24, 24);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 8, 24);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 16, 32);
                        }
                    }
                    else
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 32, 16);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 0, 16);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 16, 16);
                        }
                    }
                }
                surface_reset_target();
                
                draw_surface_ext(vKeyJoy_surface, usedDpadX - 32, usedDpadY - 32, 1, 1, 0, c_white, alpha);
                
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButton, 1, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButton, 0, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
            }
        }
        else
        if(vksize == 1)
        {
            if(drawDPad)
            {
                surface_set_target(vKeyJoy_surface);
                draw_clear_alpha(c_black, 0);
                draw_sprite(sprTouchscreenDPadBaseMed, 0, 0, 0);
                
                if(android_vk_is_pressed(cUP))
                {
                    if(android_vk_is_pressed(cRIGHT))
                    {
                        draw_sprite(sprTouchscreenDPadJoyMed, 0, 20, 4);
                    }
                    else
                    if(android_vk_is_pressed(cLEFT))
                    {
                        draw_sprite(sprTouchscreenDPadJoyMed, 0, 4, 4);
                    }
                    else
                    {
                        draw_sprite(sprTouchscreenDPadJoyMed, 0, 12, 0);
                    }
                }
                else
                {
                    if(android_vk_is_pressed(cDOWN))
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 20, 20);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 4, 20);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 12, 24);
                        }
                    }
                    else
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 24, 12);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 0, 12);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 12, 12);
                        }
                    }
                }
                
                surface_reset_target();
                
                draw_surface_ext(vKeyJoy_surface, usedDpadX - 24, usedDpadY - 24, 1, 1, 0, c_white, alpha);
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButtonMed, 1, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButtonMed, 0, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
            }
        }
        else
        if(vksize == 2)
        {
            if(drawDPad)
            {
                surface_set_target(vKeyJoy_surface);
                draw_clear_alpha(c_black, 0);
                draw_sprite(sprTouchscreenDPadBaseSmall, 0, 0, 0);
                
                if(android_vk_is_pressed(cUP))
                {
                    if(android_vk_is_pressed(cRIGHT))
                    {
                        draw_sprite(sprTouchscreenDPadJoySmall, 0, 13, 3);
                    }
                    else
                    if(android_vk_is_pressed(cLEFT))
                    {
                        draw_sprite(sprTouchscreenDPadJoySmall, 0, 3, 3);
                    }
                    else
                    {
                        draw_sprite(sprTouchscreenDPadJoySmall, 0, 8, 0);
                    }
                }
                else
                {
                    if(android_vk_is_pressed(cDOWN))
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 13, 13);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 3, 13);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 8, 16);
                        }
                    }
                    else
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 16, 8);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 0, 8);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 8, 8);
                        }
                    }
                }
                surface_reset_target();
                draw_surface_ext(vKeyJoy_surface, usedDpadX - 16, usedDpadY - 16, 1, 1, 0, c_white, alpha);
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButtonSmall, 1, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButtonSmall, 0, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
            }
        }
        
        // draw triangles
        
        /*
        var centerx = dpadx + 32;
        var centery = dpady + 32;
        if(is_array(dpad_sectors))
        {
            for(var i = 1; i &lt;= 9; i++)
            {
                if(i != 5)
                {
                    if(i == 1 || i == 3 || i == 7 || i == 9)
                    {
                        draw_set_color(c_red);
                    }
                    else
                    {
                        draw_set_color(c_green);
                    }
                    
                    draw_triangle(
                        dpad_sectors[i,0],
                        dpad_sectors[i,1],
                        dpad_sectors[i,2],
                        dpad_sectors[i,3],
                        dpadx,
                        dpady,
                        false
                    );
                }
            }        
        }
        draw_set_color(c_white);
        */
    }

    
    var playerId = 0;
    if(objGameData.character_id[playerId] == 1)
    {
        if(objProgram.special_future_current_level &gt;= 7)
        {
            if(room != MM1)
            {
                superIsEnabled = objGameData.rings[playerId]&gt;=50;
                var alreadySuper = false;
                jumping = false;
                if(instance_exists(objPlayer))
                {
                    var player = instance_find(objPlayer, 0);
                    alreadySuper = player.superform;
                    superIsEnabled = superIsEnabled || alreadySuper;
                    jumping = player.jumping;
                }
                if(superIsEnabled)
                {
                    if(alreadySuper)
                    {
                        if(android_vk_is_pressed(cB))
                        {
                            draw_sprite_ext(sprTouchscreenSuperButtonBlue, 1, bbx, bby, 1, 1, 0, c_white, alpha);
                        }
                        else
                        {
                            draw_sprite_ext(sprTouchscreenSuperButtonBlue, 0, bbx, bby, 1, 1, 0, c_white, alpha);
                        }
                    }
                    else
                    {
                        if(android_vk_is_pressed(cB))
                        {
                            draw_sprite_ext(sprTouchscreenSuperButtonYellow, 1, bbx, bby, 1, 1, 0, c_white, alpha);
                        }
                        else
                        {
                            draw_sprite_ext(sprTouchscreenSuperButtonYellow, 0, bbx, bby, 1, 1, 0, c_white, alpha);
                        }
                    }
                }
            }
        }
    }

    draw_sprite_ext(sprTouchscreenPauseButton, 3, bsx, bsy, 1, 1, 0, c_white, alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
