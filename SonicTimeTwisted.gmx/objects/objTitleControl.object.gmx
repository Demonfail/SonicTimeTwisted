<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1026</depth>
  <persistent>0</persistent>
  <parentName>objSceneObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
image_speed = 0;
name=0;
alarm[0]=80;
levelSelect = 0;
start = false;
instance_create(x,y,objTitleEffects);
pauseOffset = 0;
pauseState = 3;
controlState = 0;
axis = "";
inputFlash = 0;
screenAlpha = 0;
allowInput = true;
gamepadSupport = true;
logoAlpha = 4;
startText = 'PRESS START';
option1Text = 'MAP KEYS OR GAMEPAD';
option2Text = 'SCREEN SIZE';
option3Text = 'ENABLE GAMEPAD F1';
menu = instance_create(x,y,objMenu);
menu.default_state = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>name</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>12</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>65</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>name</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>9</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>bgmTitle</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if name &gt; 2 &amp;&amp; name &lt; 9 {
    audio_play_sound(sndTock,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>objScreen.image_index div 8</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Menu
if(pauseState == 0)
{
    if allowInput {
        // allow the menu object to handle everything
        if(!menu.active)
        {
            menu.wait_for_release = true;
            menu.active = true;
        }
        
        with(menu) event_user(0);
    }
}
else
if(pauseState == 3)
{
    if start == true
    {   
        if input_check_pressed(cSTART) {
            pauseState=0;
            with objTitlescreenPlane { hsp = 0; image_speed = 0 }
            with objTitleSonic image_speed = 0;
        }
    }
}
// fade in black for menu backer    
if pauseState != 3 {
    if screenAlpha &lt; .75 {
        screenAlpha+=.025;
    }
}
if objProgram.inputManager.pressingGamepad == -1 {
    allowInput = true;
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Level Select Code
switch(levelSelect) {
case 0:
    if input_check_pressed(cLEFT) {
        levelSelect +=1;
    }
break;
case 1:
    if input_check_pressed(cLEFT) {
        levelSelect +=1;
    } else if input_check_pressed(cRIGHT) || input_check_pressed(cUP) || input_check_pressed(cDOWN) {
        levelSelect = 0;
    }
break;
case 2:
    if input_check_pressed(cRIGHT) {
        levelSelect +=1;
    } else if input_check_pressed(cLEFT) || input_check_pressed(cUP) || input_check_pressed(cDOWN) {
        levelSelect = 0;
    }
break;
case 3:
    if input_check_pressed(cRIGHT) {
        levelSelect +=1;
    } else if input_check_pressed(cLEFT) || input_check_pressed(cUP) || input_check_pressed(cDOWN) {
        levelSelect = 0;
    }
break;
case 4:
    if input_check_pressed(cUP) {
        levelSelect +=1;
    } else if input_check_pressed(cRIGHT) || input_check_pressed(cLEFT) || input_check_pressed(cDOWN) {
        levelSelect = 0;
    }
break;
case 5:
    if input_check_pressed(cDOWN) &amp;&amp; pauseState == 3 {
        levelSelect +=1;
        audio_play_sound(sndRing,0,false);
    } else if input_check_pressed(cRIGHT) || input_check_pressed(cUP) || input_check_pressed(cLEFT) {
        levelSelect = 0;
    }
break;
case 6:
    if input_check(cA) &amp;&amp; input_check(cSTART) {
        //transition_to(objFadeWhite, charselect, 10);
        if allowInput {
            // allow the menu object to handle everything
            if(!menu.active)
            {
                menu.wait_for_release = true;
                menu.active = true;
            }
            
            with(menu)
            {
                state = 11;
                event_user(0);
            }
        }
    } else if input_check_pressed(cRIGHT) || input_check_pressed(cUP) || input_check_pressed(cDOWN) || input_check_pressed(cB) || input_check_pressed(cC){
        levelSelect = 0;
    }
break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// flash for key mapper and alpha control
if inputFlash &lt; 1
    inputFlash += .25;
    else inputFlash = 0;
    
if name &lt; 3 {
    logoAlpha -=.025;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stop audio
audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Names
// fade for menu
draw_set_alpha(screenAlpha);
draw_set_color(c_black);
draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,false);
    
// setup
draw_set_color(c_white);
draw_set_alpha(image_alpha);
draw_set_valign(fa_top);
draw_set_halign(fa_center);
draw_set_font(objResources.fontHud);
// score / time / rings string
switch name {
case 0: case 1: case 2:
    draw_set_color(c_black);
    draw_set_alpha(logoAlpha);
    draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_sprite_ext(sprOverboundLogo,0,view_xview[0]+213,view_yview[0]+120,1,1,0,c_white,logoAlpha);
break;
case 3: draw_text_color(view_xview[0]+213,view_yview[0]+120,'BRYCE STOCK "OVERBOUND"',c_white,c_white,c_yellow,c_yellow,1); break;
case 4: draw_text_color(view_xview[0]+213, view_yview[0]+120, 'HINCHY',c_white,c_white,c_yellow,c_yellow,1) break;
case 5: draw_text_color(view_xview[0]+213, view_yview[0]+120, 'JOEVAN SALMON-JOHNSON "VECTORSATYR"',c_white,c_white,c_yellow,c_yellow,1) break;
case 6: draw_text_color(view_xview[0]+213, view_yview[0]+120, 'MARC "DERZOCKER"',c_white,c_white,c_yellow,c_yellow,1) break;
case 7: draw_text_color(view_xview[0]+213, view_yview[0]+120, 'DEVIN REEVES "MERCURY"',c_white,c_white,c_yellow,c_yellow,1)break;
case 8: draw_text_color(view_xview[0]+213, view_yview[0]+120, 'SHANE "SPARKS"',c_white,c_white,c_yellow,c_yellow,1) break;
case 12: if pauseState == 3 draw_text_color(view_xview[0]+213, view_yview[0]+228, startText,c_white,c_white,c_yellow,c_yellow,1); start=true; break;
}
draw_set_halign(fa_center);
draw_set_color(c_yellow);
/*
if pauseState == 0 {
    draw_text_color(view_xview[view_current]+213, view_yview[view_current]+75, "PLAY",c_white,c_white,c_yellow,c_yellow,1);
    if pauseState != 1 draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, option1Text,c_white,c_white,c_yellow,c_yellow,1);
    if pauseState != 2 draw_text_color(view_xview[view_current]+213, view_yview[view_current]+107, option2Text,c_white,c_white,c_yellow,c_yellow,1);
    if pauseState != 4 draw_text_color(view_xview[view_current]+213, view_yview[view_current]+123, option3Text,c_white,c_white,c_yellow,c_yellow,1);
    draw_text_color(view_xview[view_current]+213, view_yview[view_current]+139, "EXIT GAME",c_white,c_white,c_yellow,c_yellow,1);
    
    draw_sprite_ext(sprLevelSelect,image_index,view_xview[view_current]+213, view_yview[view_current]+81+pauseOffset,1,1,0,c_white,1);
}
if pauseState == 1 &amp;&amp; inputFlash &lt;= .5 { // set controls
    switch controlState {
        case 0:
            draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, "UP",c_white,c_white,c_yellow,c_yellow,1);
        break;
        case 1:
            draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, "DOWN",c_white,c_white,c_yellow,c_yellow,1);
        break;
        case 2:
            draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, "LEFT",c_white,c_white,c_yellow,c_yellow,1);
        break;
        case 3:
            draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, "RIGHT",c_white,c_white,c_yellow,c_yellow,1);
        break;
        case 4:
            draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, "A",c_white,c_white,c_yellow,c_yellow,1);
        break;
        case 5:
            draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, "B",c_white,c_white,c_yellow,c_yellow,1);
        break;
        case 6:
            draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, "C",c_white,c_white,c_yellow,c_yellow,1);
        break;
        case 7:
            draw_text_color(view_xview[view_current]+213, view_yview[view_current]+91, "START",c_white,c_white,c_yellow,c_yellow,1);
        break;
    }
    
}
if pauseState == 2 &amp;&amp; inputFlash &lt;= .5 {
    switch objScreen.window_state {
    case 1:
        draw_text_color(view_xview[view_current]+213, view_yview[view_current]+107, "WINDOW",c_white,c_white,c_yellow,c_yellow,1);
    break;
    case 2:
        draw_text_color(view_xview[view_current]+213, view_yview[view_current]+107, "WINDOW 2X",c_white,c_white,c_yellow,c_yellow,1);
    break;
    case 3:
        draw_text_color(view_xview[view_current]+213, view_yview[view_current]+107, "WINDOW 3X",c_white,c_white,c_yellow,c_yellow,1);
    break;
    case 4:
        draw_text_color(view_xview[view_current]+213, view_yview[view_current]+107, "FULLSCREEN",c_white,c_white,c_yellow,c_yellow,1);
    break;
    
    }
}
if pauseState == 4 &amp;&amp; inputFlash &lt;= .5 {
    switch gamepadSupport {
    case false:
        draw_text_color(view_xview[view_current]+213, view_yview[view_current]+123, "GAMEPAD DISABLED",c_white,c_white,c_yellow,c_yellow,1);
    break;
    case true:
        draw_text_color(view_xview[view_current]+213, view_yview[view_current]+123, "GAMEPAD ENABLED",c_white,c_white,c_yellow,c_yellow,1);
    break;
    }
}
*/
with(menu) event_user(4);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
