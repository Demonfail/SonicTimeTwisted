<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1026</depth>
  <persistent>0</persistent>
  <parentName>objTitleControl</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objTitleEffects)
{
    instance_destroy();
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// unless the screen is touched - enable input normally
switch pauseState {
    case 3:
        // if the screen is touched - display the menu
        if (start == true)
        {
            if(device_mouse_check_button_pressed(0, mb_left))
            {
                smartphone_confirm();
            }
        }
        break;
    case 0:
        // depending on where the screen is touched on the main menu - redirect there
        if (allowInput == true) {
            if(device_mouse_check_button_pressed(0, mb_left))
            {
                var click_x = device_mouse_x_to_gui(0);
                var click_y = device_mouse_y_to_gui(0);
                
                if(point_in_rectangle(
                    click_x, click_y, 113, 70, 312, 88))
                {
                    // play
                    pauseOffset = 0;
                    smartphone_confirm();
                }
                else
                
                if(point_in_rectangle(
                    click_x, click_y, 113, 89, 312, 107))
                {
                    // switch hud mode
                    pauseOffset = 16;
                    objAndroid.hudmode = (objAndroid.hudmode + 1) mod 2;
                    smartphone_save_configuration();
                    event_user(0);
                }
                else
                
                if(point_in_rectangle(
                    click_x, click_y, 113, 108, 312, 120))
                {
                    // switch input
                    pauseOffset = 32;
                    objAndroid.input = (objAndroid.input + 1) mod 3;
                    smartphone_save_configuration();
                    event_user(0);
                    
                }
                else
                
                if(point_in_rectangle(
                    click_x, click_y, 113, 121, 312, 137))
                {
                    pauseOffset = 48;
                    // configure input
                    switch(objAndroid.input)
                    {
                        case 0:
                            // configure touchscreen
                            
                            break;
                        case 1:
                            // configure gamepad
                            
                            break;
                        case 2:
                            // configure keyboard
                            
                            break;
                    }
                }
                else
                
                if(point_in_rectangle(
                    click_x, click_y, 113, 137, 312, 153))
                {
                    // quit
                    pauseOffset = 64;
                    smartphone_confirm();
                    
                }
            }
            if input_check_pressed(cACTION) || input_check_pressed(cSTART) {
                switch pauseOffset {
                    case 16: // Controls
                        pauseState = 1;
                        allowInput = false;
                        objInput.pressingGamepad = input_any_gamepad_button();
                        objInput.alarm[0] = 20;
                    break;
                    case 32: // Window Size
                        pauseState = 2;
                        allowInput = false;
                    break;
                    case 48: // Enable Gamepad
                        pauseState = 4;
                        allowInput = false;
                    break;
                    case 64: // Exit
                        pauseState = 5;
                        allowInput = false;
                    break;
                
                }
            
        } 
        }
        break;
    case 6:
        // place touchscreen controls
        break;
    case 7:
        // place touchscreen controls
        break;
    case 8:
        // place touchscreen controls
        break;
    default:
        // disable all other options - they are not supported here
        
}
/// Start Menu - Android-specific
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// init menu labels
startText = 'TOUCH TO START';
switch(objAndroid.hudmode)
{
    case 0:
        option1Text = 'HUD MODE - SMARTPHONE';
        break;
    case 1:
        option1Text = 'HUD MODE - CONSOLE';
        break;
}
switch(objAndroid.input)
{
    case 0:
        option2Text = 'INPUT - TOUCH SCREEN';
        break;
    case 1:
        option2Text = 'INPUT - GAMEPAD';
        break;
    case 2:
        option2Text = 'INPUT - KEYBOARD';
        break;
}
option3Text = 'CONFIGURE INPUT';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_rectangle(213, 75, 213 + 16, 75 + 16, false);
//draw_text(100, 0, string(device_mouse_x_to_gui(0))+';'+string(device_mouse_y_to_gui(0)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
