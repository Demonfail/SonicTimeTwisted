<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(objTileGridManager))
{
    s = surface_create(256, 256);
}
else
{
    s = -1;
    surface_width = -1;
    surface_height = -1;
    use_depth = depth;
    x_in_grid = -1;
    y_in_grid = -1;
    owner = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// cleanup at the end
if(surface_exists(s))
{
    surface_free(s);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(owner == noone)
{
    instance_destroy();
}
else
if(!instance_exists(owner))
{
    instance_destroy();
}
else
{
    if(!surface_exists(s))
    {
        // if the tile width/height haven't been calculated yet (initialized at -1), calculate them
        // for performances' sake, the GMS documentation states surfaces should have dimensions
        // that are powers of 2
        if(surface_width == -1)
        {
            var dest_surface_width = owner.grid_width * 3;
            var tmp_surface_size = 1;
            while(tmp_surface_size &lt; dest_surface_width)
            {
                tmp_surface_size *= 2;
            }
            var dest_surface_height = owner.grid_height * 3;
            surface_width = tmp_surface_size;
            tmp_surface_size = 1;
            while(tmp_surface_size &lt; dest_surface_height)
            {
                tmp_surface_size *= 2;
            }
            surface_height = tmp_surface_size;
        }    
        // create the surface
        s = surface_create(surface_width, surface_height);
        // fill the surface with the appropriate tiles
        x_in_grid = owner.x_in_grid;
        y_in_grid = owner.y_in_grid;
        var grid_width = owner.grid_width;
        var grid_height = owner.grid_height;
        x = owner.x - grid_width;
        y = owner.y - grid_height;
        
        
        surface_set_target(s);
        draw_clear_alpha(c_black, 0);
        for(var i = -1; i &lt;= 1; i++)
        {
            for(var j = -1; j &lt;= 1; j++)
            {
                var cur_x_in_grid = x_in_grid + i;
                var cur_y_in_grid = y_in_grid + j;
                if(cur_x_in_grid &gt;= 0 &amp;&amp; cur_x_in_grid &lt; ds_grid_width(owner.grid))
                {
                    if(cur_y_in_grid &gt;= 0 &amp;&amp; cur_y_in_grid &lt; ds_grid_height(owner.grid))
                    {
                        var list = ds_grid_get(owner.grid, cur_x_in_grid, cur_y_in_grid);
                        for(var current_tile = 0; current_tile &lt; ds_list_size(list); current_tile++)
                        {
                            var tile_id = ds_list_find_value(list, current_tile);
                            if(use_depth == tile_get_depth(tile_id))
                            {
                                var x_on_surface = tile_get_x(tile_id) - x;
                                var y_on_surface = tile_get_y(tile_id) - y;
                                draw_background_part_ext(
                                    tile_get_background(tile_id), 
                                    tile_get_left(tile_id), 
                                    tile_get_top(tile_id), 
                                    tile_get_width(tile_id), 
                                    tile_get_height(tile_id),
                                    x_on_surface, y_on_surface,
                                    tile_get_xscale(tile_id),
                                    tile_get_yscale(tile_id),
                                    tile_get_blend(tile_id),
                                    tile_get_alpha(tile_id)
                                );
                            }
                        }
                    }
                }

            }
        }
        surface_reset_target();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface(s, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
