<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
gui_y_offset = 108;
gui_x_offset = 113;
gui_x_length = 200;
wait_for_release_click = false;

// syncing some stuff with the input object for the button reposition screen
if(ANDROID_CONSOLE != 0)
{
    dpadx = 0;
    dpady = 0;
    bax = 0;
    bay = 0;
    bsx = 0;
    bsy = 0;
    bbx = 0;
    bby = 0;
    vksize = 0;
}
else
{
    dpadx = objProgram.inputManager.dpadx;
    dpady = objProgram.inputManager.dpady;
    bax = objProgram.inputManager.bax;
    bay = objProgram.inputManager.bay;
    bsx = objProgram.inputManager.bsx;
    bsy = objProgram.inputManager.bsy;
    bbx = objProgram.inputManager.bbx;
    bby = objProgram.inputManager.bby;
    vksize = objProgram.inputManager.vksize;
}

dpadgraphic = 0;
dpadSprite = sprTouchscreenDPadTemplate;
buttonSprite = sprTouchscreenButton;
dpadRadius = 0;

// drag and drop variables
device_dragging[0] = 0;
device_dragging[1] = 0;
device_dragging[2] = 0;
device_dragging[3] = 0;
device_dragging[4] = 0;
device_xoffset[0] = 0;
device_xoffset[1] = 0;
device_xoffset[2] = 0;
device_xoffset[3] = 0;
device_xoffset[4] = 0;
device_yoffset[0] = 0;
device_yoffset[1] = 0;
device_yoffset[2] = 0;
device_yoffset[3] = 0;
device_yoffset[4] = 0;

show_vk_alpha = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>android_menu_key_mapping_states();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// special draw for some states
if(objProgram.inputManager.input == 0)
{
    if(state == 11)
    {
        // draw selected state for every character if the touchscreen is used

        draw_sprite(sprCharacterSelect, 1, x_offset+96, view_yview[view_current] + 112);
        draw_sprite(sprSelector, 1, x_offset+96, view_yview[view_current] + 112);

        draw_sprite(sprCharacterSelect, 0, x_offset+216, view_yview[view_current] + 112);
        draw_sprite(sprSelector, 0, x_offset+216, view_yview[view_current] + 112);

        draw_sprite(sprCharacterSelect, 2, x_offset+336, view_yview[view_current] + 112);
        draw_sprite(sprSelector, 2, x_offset+336, view_yview[view_current] + 112);
    }
}
else
{
    event_inherited();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(ANDROID_CONSOLE == 0)
{
    if(state == 1002)
    {
        draw_sprite(dpadSprite, 0,
            x_offset + dpadx - dpadRadius,
            view_yview[view_current] + dpady - dpadRadius);
        
        draw_sprite(buttonSprite, 0,
            x_offset + bax - dpadRadius,
            view_yview[view_current] + bay - dpadRadius);
        
        draw_sprite(sprTouchscreenPauseButton, 0,
            x_offset + bsx,
            view_yview[view_current] + bsy);
        
        draw_sprite(sprTouchscreenSuperButtonYellow, 0,
            x_offset + bbx,
            view_yview[view_current] + bby);
    }
    else
    if(state == 1004 || state == 1005 || state == 1006)
    {        
        var tiltscale_x = 0;
        var tiltscale_y = 0;
        with(objProgram.inputManager)
        {
            tiltscale_x = android_read_gyroscope_x();
            tiltscale_y = android_read_gyroscope_y();
        }
        var keyToPressX, keyToPressY;
        if(tiltscale_x &lt; 0)
        {
            keyToPressX = cLEFT;
        }
        else
        {
            keyToPressX = cRIGHT;
        }
        if(tiltscale_y &lt; 0)
        {
            keyToPressY = cUP;
        }
        else
        {
            keyToPressY = cDOWN;
        }
        var test_origin_x = x_offset + 204;
        var test_origin_y = view_yview[view_current] + 200;
        
        if(objProgram.inputManager.gyromode == 0)
        {
            // simple mode where tilting simply presses left and right
            if(tiltscale_x &lt; 0)
            {
                draw_sprite(sprGyroscopeTest, 1, test_origin_x - 16, test_origin_y);
                draw_sprite(sprGyroscopeTest, 4, test_origin_x + 16, test_origin_y);
            }
            else
            if(tiltscale_x &gt; 0)
            {
                draw_sprite(sprGyroscopeTest, 2, test_origin_x - 16, test_origin_y);
                draw_sprite(sprGyroscopeTest, 3, test_origin_x + 16, test_origin_y);
            }
            else
            {
                draw_sprite(sprGyroscopeTest, 2, test_origin_x - 16, test_origin_y);
                draw_sprite(sprGyroscopeTest, 4, test_origin_x + 16, test_origin_y);
            }
            
            if(tiltscale_y &lt; 0)
            {
                draw_sprite(sprGyroscopeTest, 5, test_origin_x, test_origin_y - 16);
                draw_sprite(sprGyroscopeTest, 8, test_origin_x, test_origin_y + 16);
            }
            else
            if(tiltscale_y &gt; 0)
            {
                draw_sprite(sprGyroscopeTest, 6, test_origin_x, test_origin_y - 16);
                draw_sprite(sprGyroscopeTest, 7, test_origin_x, test_origin_y + 16);
            }
            else
            {
                draw_sprite(sprGyroscopeTest, 6, test_origin_x, test_origin_y - 16);
                draw_sprite(sprGyroscopeTest, 8, test_origin_x, test_origin_y + 16);
            }
        }
        else
        if(objProgram.inputManager.gyromode == 1)
        {
            tiltscale_x = abs(tiltscale_x);
            tiltscale_y = abs(tiltscale_y);
            // pseudo-analog mode where depending on the tilt, left and right buttons are mashed more or less often
            for(var i=10; i&gt;= 1; i = i - 2)
            {
                if(keyToPressX == cLEFT &amp;&amp; tiltscale_x &gt;= i)
                {
                    draw_sprite(sprGyroscopeTest, 1, test_origin_x -  (4*(i+2)),test_origin_y);
                }
                else
                {
                    draw_sprite(sprGyroscopeTest, 2, test_origin_x - (4*(i+2)),test_origin_y);
                }
                if(keyToPressX == cRIGHT &amp;&amp; tiltscale_x &gt;= i)
                {
                    draw_sprite(sprGyroscopeTest, 3, test_origin_x + (4*(i+2)),test_origin_y);
                }
                else
                {
                    draw_sprite(sprGyroscopeTest, 4, test_origin_x + (4*(i+2)),test_origin_y);
                }
                
                if(keyToPressY == cUP &amp;&amp; tiltscale_y &gt;= i)
                {
                    draw_sprite(sprGyroscopeTest, 5, test_origin_x,test_origin_y - 2 - (2*(i+2)));
                }
                else
                {
                    draw_sprite(sprGyroscopeTest, 6, test_origin_x,test_origin_y - 2 - (2*(i+2)));
                }
                if(keyToPressY == cDOWN &amp;&amp; tiltscale_y &gt;= i)
                {
                    draw_sprite(sprGyroscopeTest, 7, test_origin_x,test_origin_y + 2 + (2*(i+2)));
                }
                else
                {
                    draw_sprite(sprGyroscopeTest, 8, test_origin_x,test_origin_y + 2 + (2*(i+2)));
                }
            }
        }
        draw_sprite(sprGyroscopeTest, 0, test_origin_x,test_origin_y);
        
        
        draw_set_alpha(objProgram.inputManager.vkalpha);
        
        if(objProgram.inputManager.gyro_origin_is_set)
        {
            draw_sprite(buttonSprite, 1,
                x_offset + bax - dpadRadius,
                view_yview[view_current] + bay - dpadRadius);
        }
        else
        {
            draw_sprite(buttonSprite, 0,
                x_offset + bax - dpadRadius,
                view_yview[view_current] + bay - dpadRadius);
        }
        
        draw_set_alpha(1);
    }
    if(show_vk_alpha)
    {
        draw_set_alpha(objProgram.inputManager.vkalpha);
        draw_sprite(dpadSprite, 0,
            x_offset + dpadx - dpadRadius,
            view_yview[view_current] + dpady - dpadRadius);
        
        draw_sprite(buttonSprite, 0,
            x_offset + bax - dpadRadius,
            view_yview[view_current] + bay - dpadRadius);
        
        draw_sprite(sprTouchscreenPauseButton, 0,
            x_offset + bsx,
            view_yview[view_current] + bsy);
        
        draw_sprite(sprTouchscreenSuperButtonYellow, 0,
            x_offset + bbx,
            view_yview[view_current] + bby);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// what to do when left or right are pushed
if(state != 7 &amp;&amp; state &lt; 1000)
{
    event_inherited();
}
else
{
    if(active)
    {
        switch(state)
        {
            case 7:
                switch(cursor)
                {
                    case 1: // score tally mode
                        if(pressed == cLEFT)
                        {
                            if(objProgram.score_tally_mode)
                            {
                                objProgram.score_tally_mode--;
                            }
                            else
                            {
                                objProgram.score_tally_mode = 2;
                            }
                        }
                        else
                        {
                            objProgram.score_tally_mode = (objProgram.score_tally_mode + 1) mod 3;
                        }
                        save_options();
                        event_user(1);
                        activated = true;
                        break;
                    case 2: // input mode
                        if(pressed == cLEFT)
                        {
                            if(objProgram.inputManager.input == 0)
                            {
                                // TOUCHSCREEN -&gt; KEYBOARD
                                android_device_set_mode_keyboard(0);
                                objProgram.inputManager.input = 1;
                                if(objProgram.inputManager.gamepad_update_enabled)
                                {
                                    with(objProgram.inputManager)
                                    {
                                        event_user(0);
                                    }
                                }
                            }
                            else
                            {
                                // KEYBOARD -&gt; GAMEPAD
                                android_device_set_mode_gamepad(0);
                                if(!objProgram.inputManager.gamepad_update_enabled)
                                {
                                    // GAMEPAD -&gt; KEYBOARD
                                    android_device_set_mode_keyboard(0);
                                    with(objProgram.inputManager)
                                    {
                                        event_user(0);
                                    }
                                }
                                else
                                {
                                    // GAMEPAD -&gt; TOUCHSCREEN
                                    objProgram.inputManager.input = 0;
                                    if(objProgram.inputManager.gamepad_update_enabled)
                                    {
                                        with(objProgram.inputManager)
                                        {
                                            event_user(0);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if(objProgram.inputManager.input == 0)
                            {
                                // TOUCHSCREEN -&gt; GAMEPAD
                                android_device_set_mode_gamepad(0);
                                objProgram.inputManager.input = 1;
                                if(!objProgram.inputManager.gamepad_update_enabled)
                                {
                                    with(objProgram.inputManager)
                                    {
                                        event_user(0);
                                    }
                                }
                            }
                            else
                            {
                                if(objProgram.inputManager.gamepad_update_enabled)
                                {
                                    // GAMEPAD -&gt; KEYBOARD
                                    android_device_set_mode_keyboard(0);
                                    with(objProgram.inputManager)
                                    {
                                        event_user(0);
                                    }
                                }
                                else
                                {
                                    // KEYBOARD -&gt; TOUCHSCREEN
                                    objProgram.inputManager.input = 0;
                                }
                            }
                        }
                        smartphone_save_configuration();
                        event_user(1);
                        activated = true;
                        break;                        
                }
            case 20:
                switch(cursor)
                {
                    case 1: // framerate
                        set_30_fps(1 - get_30_fps());
                        event_user(1);
                        break;
                    case 2: // score tally mode
                        if(pressed == cLEFT)
                        {
                            if(objProgram.score_tally_mode)
                            {
                                objProgram.score_tally_mode--;
                            }
                            else
                            {
                                objProgram.score_tally_mode = 2;
                            }
                        }
                        else
                        {
                            objProgram.score_tally_mode = (objProgram.score_tally_mode + 1) mod 3;
                        }
                        save_options();
                        event_user(1);
                        activated = true;
                        break;
                }
                break;
            case 1001:
                switch(cursor)
                {
                    case 2:
                        if(pressed == cLEFT)
                        {
                            if(objProgram.inputManager.vksize)
                            {
                                objProgram.inputManager.vksize--;
                            }
                            else
                            {
                                objProgram.inputManager.vksize = 2;
                            }
                        }
                        else
                        {
                            objProgram.inputManager.vksize = (objProgram.inputManager.vksize + 1) mod 3;
                        }
                        activated = true;
                        break;
                    case 3:
                        if(pressed == cLEFT)
                        {
                            if(objProgram.inputManager.dpadMode)
                            {
                                objProgram.inputManager.dpadMode--;
                            }
                            else
                            {
                                objProgram.inputManager.dpadMode = 1;
                            }
                        }
                        else
                        {
                            objProgram.inputManager.dpadMode = (objProgram.inputManager.dpadMode + 1) mod 2;
                        }
                        activated = true;
                        break;
                    case 4:
                        if(pressed == cLEFT)
                        {
                            objProgram.inputManager.vkalpha = max(0.05, objProgram.inputManager.vkalpha - 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                        }
                        else
                        {
                            objProgram.inputManager.vkalpha = min(1, objProgram.inputManager.vkalpha + 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                        }
                        show_vk_alpha = true;
                        activated = true;
                        break;
                    case 5:
                        if(pressed == cLEFT)
                        {
                            if(objProgram.inputManager.gyroinss)
                            {
                                objProgram.inputManager.gyroinss--;
                            }
                            else
                            {
                                objProgram.inputManager.gyroinss = 1;
                            }
                        }
                        else
                        {
                            objProgram.inputManager.gyroinss = (objProgram.inputManager.gyroinss + 1) mod 2;
                        }
                        activated = true;
                        break;
                    case 6:
                        if(pressed == cLEFT)
                        {
                            if(objProgram.inputManager.gg_mode)
                            {
                                objProgram.inputManager.gg_mode--;
                            }
                            else
                            {
                                objProgram.inputManager.gg_mode = 2;
                            }
                        }
                        else
                        {
                            objProgram.inputManager.gg_mode = (objProgram.inputManager.gg_mode + 1) mod 3;
                        }
                        activated = true;
                        break;
                }
                smartphone_save_configuration();
                event_user(1);
            break;
            case 1004:
                    switch(cursor)
                    {
                        case 1:
                            objProgram.inputManager.gyromode = 1 - objProgram.inputManager.gyromode;
                            smartphone_save_configuration();
                            event_user(1);
                            activated = true;                            
                    }
                    if(!objProgram.inputManager.gyromode)
                    {
                        switch(cursor)
                        {
                            case 2:
                                if(pressed == cLEFT)
                                {
                                    objProgram.inputManager.gyro_switch_on_angle_x = max(0.05, objProgram.inputManager.gyro_switch_on_angle_x - 0.05);
                                }
                                else
                                {
                                    objProgram.inputManager.gyro_switch_on_angle_x = min(1, objProgram.inputManager.gyro_switch_on_angle_x + 0.05);
                                }
                                smartphone_save_configuration();
                                event_user(1)
                                activated = true;
                                break;
                            case 3:
                                if(pressed == cLEFT)
                                {
                                    objProgram.inputManager.gyro_switch_on_angle_y = max(0.05, objProgram.inputManager.gyro_switch_on_angle_y - 0.05);
                                }
                                else
                                {
                                    objProgram.inputManager.gyro_switch_on_angle_y = min(1, objProgram.inputManager.gyro_switch_on_angle_y + 0.05);
                                }
                                smartphone_save_configuration();
                                event_user(1);
                                activated = true;
                                break;
                        }
                    }
                    else
                    {
                        switch(cursor)
                        {
                            case 2:
                                if(pressed == cLEFT)
                                {
                                    objProgram.inputManager.gyro_analog_start_x = max(0.05, objProgram.inputManager.gyro_analog_start_x - 0.05);
                                }
                                else
                                {
                                    objProgram.inputManager.gyro_analog_start_x = min(1, objProgram.inputManager.gyro_analog_start_x + 0.05);
                                }
                                smartphone_save_configuration();
                                event_user(1)
                                activated = true;
                                break;
                            case 3:
                                if(pressed == cLEFT)
                                {
                                    objProgram.inputManager.gyro_analog_end_x = max(0.05, objProgram.inputManager.gyro_analog_end_x - 0.05);
                                }
                                else
                                {
                                    objProgram.inputManager.gyro_analog_end_x = min(1, objProgram.inputManager.gyro_analog_end_x + 0.05);
                                }
                                smartphone_save_configuration();
                                event_user(1)
                                activated = true;
                                break;
                            case 4:
                                if(pressed == cLEFT)
                                {
                                    objProgram.inputManager.gyro_analog_start_y = max(0.05, objProgram.inputManager.gyro_analog_start_y - 0.05);
                                }
                                else
                                {
                                    objProgram.inputManager.gyro_analog_start_y = min(1, objProgram.inputManager.gyro_analog_start_y + 0.05);
                                }
                                smartphone_save_configuration();
                                event_user(1)
                                activated = true;
                                break;
                            case 5:
                                if(pressed == cLEFT)
                                {
                                    objProgram.inputManager.gyro_analog_end_y = max(0.05, objProgram.inputManager.gyro_analog_end_y - 0.05);
                                }
                                else
                                {
                                    objProgram.inputManager.gyro_analog_end_y = min(1, objProgram.inputManager.gyro_analog_end_y + 0.05);
                                }
                                smartphone_save_configuration();
                                event_user(1)
                                activated = true;
                                break;
                        }
                    }
                
        }
    }
    if(activated)
    {
        audio_play_sound(sndBeep,10,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute actions when option is selected - called by this object
if(state != 7 &amp;&amp; state &lt; 1000)
{
    event_inherited();
}
else
{
    var usedState = state;
    var usedCursor = cursor;
    // if we're currently confirming a selection: use the action asociated with the
    // object that asked for confirmation, not the one associated with the
    // "confirm" option
    if(state == 10 &amp;&amp; cursor == 1)
    {
        usedState = confirm_state;
        usedCursor = confirm_cursor;
    }
    
    if(active)
    {
        switch(usedState)
        {
            case 7:
                // Options menu
                switch(usedCursor)
                {
                    case 2: // input mode
                        if(objProgram.inputManager.input == 0)
                        {
                            // TOUCHSCREEN -&gt; GAMEPAD
                            android_device_set_mode_gamepad(0);
                            objProgram.inputManager.input = 1;
                            if(!objProgram.inputManager.gamepad_update_enabled)
                            {
                                with(objProgram.inputManager)
                                {
                                    event_user(0);
                                }
                            }
                        }
                        else
                        {
                            if(objProgram.inputManager.gamepad_update_enabled)
                            {
                                // GAMEPAD -&gt; KEYBOARD
                                android_device_set_mode_keyboard(0);
                                with(objProgram.inputManager)
                                {
                                    event_user(0);
                                }
                            }
                            else
                            {
                                // KEYBOARD -&gt; TOUCHSCREEN
                                objProgram.inputManager.input = 0;
                            }
                        }
                        smartphone_save_configuration();
                        event_user(1);
                        break;
                }
                
                break;
            case 20:
                // Video settings screen
                switch(usedCursor)
                {
                    case 1: // framerate
                        set_30_fps(1 - get_30_fps());
                        event_user(1);
                        break;
                    case 2: // score tally mode
                        objProgram.score_tally_mode = (objProgram.score_tally_mode + 1) mod 3;
                        save_options();
                        event_user(1);
                        break;
                }
                break;
            case 1001:
                // Touchscreen config screen
                switch(usedCursor)
                {
                    case 2:
                        objProgram.inputManager.vksize = (objProgram.inputManager.vksize + 1) mod 3;
                        break;
                    case 3:
                        objProgram.inputManager.dpadMode = (objProgram.inputManager.dpadMode + 1) mod 2;
                        break;
                    case 4:
                        audio_play_sound(sndBeep,10,false);
                        slide_dir = true;
                        slide_timer = 30;
                        slide_to_state = 1006;
                        slide_to_cursor = 0;
                        slide_from_state = state;
                        break;
                    case 5:
                        objProgram.inputManager.gyroinss = (objProgram.inputManager.gyroinss + 1) mod 2;
                        break;
                    case 6:
                        objProgram.inputManager.gg_mode = (objProgram.inputManager.gg_mode + 1) mod 3;
                        break;
                }
                smartphone_save_configuration();
                event_user(1);
                break;
            case 1003:
                // touchscreen reposition confirmation
                switch(usedCursor)
                {
                    case 1:
                        objProgram.inputManager.dpadx = dpadx;
                        objProgram.inputManager.dpady = dpady;
                        objProgram.inputManager.bax = bax;
                        objProgram.inputManager.bay = bay;
                        objProgram.inputManager.bsx = bsx;
                        objProgram.inputManager.bsy = bsy;
                        objProgram.inputManager.bbx = bbx;
                        objProgram.inputManager.bby = bby;
                        smartphone_save_configuration();
                        audio_play_sound(sndBeep,10,false);
                        slide_dir = false;
                        slide_timer = 30;
                        slide_to_state = 1001;
                        slide_to_cursor = 0;
                        slide_from_state = 1002;
                        break;
                    case 2:
                        audio_play_sound(sndBeep,10,false);
                        slide_dir = false;
                        slide_timer = 30;
                        slide_to_state = 1001;
                        slide_to_cursor = 0;
                        slide_from_state = 1002;
                        break;
                    case 3:
                        objProgram.inputManager.dpadx = 64;
                        objProgram.inputManager.dpady = 178;
                        objProgram.inputManager.bax = 364;
                        objProgram.inputManager.bay = 178;
                        objProgram.inputManager.bsx = 200;
                        objProgram.inputManager.bsy = 16;
                        objProgram.inputManager.bbx = 324;
                        objProgram.inputManager.bby = 88;
                        audio_play_sound(sndBeep,10,false);
                        slide_dir = false;
                        slide_timer = 30;
                        slide_to_state = 1001;
                        slide_to_cursor = 0;
                        slide_from_state = 1002;
                        break;
                }
                break;
            case 1004:
                // gyro configuration
                switch(usedCursor)
                {
                    case 1:
                        objProgram.inputManager.gyromode = 1 - objProgram.inputManager.gyromode;
                        smartphone_save_configuration();
                        event_user(1);
                        break;
                }
                if(!objProgram.inputManager.gyromode)
                {
                    switch(usedCursor)
                    {
                        case 2:
                            audio_play_sound(sndBeep,10,false);
                            slide_dir = true;
                            slide_timer = 30;
                            slide_to_state = 1005;
                            slide_to_cursor = 0;
                            slide_from_state = state;
                            break;
                        case 3:
                            audio_play_sound(sndBeep,10,false);
                            slide_dir = true;
                            slide_timer = 30;
                            slide_to_state = 1006;
                            slide_to_cursor = 0;
                            slide_from_state = state;
                            break;
                    }
                }
                else
                {
                    switch(usedCursor)
                    {
                        case 2:
                        case 3:
                            audio_play_sound(sndBeep,10,false);
                            slide_dir = true;
                            slide_timer = 30;
                            slide_to_state = 1005;
                            slide_to_cursor = 0;
                            slide_from_state = state;
                            break;
                        case 4:
                        case 5:
                            audio_play_sound(sndBeep,10,false);
                            slide_dir = true;
                            slide_timer = 30;
                            slide_to_state = 1006;
                            slide_to_cursor = 0;
                            slide_from_state = state;
                            break;
                    }
                }
                      
                
                break;
            case 1005:
                if(!objProgram.inputManager.gyromode)
                {
                    switch(usedCursor)
                    {
                        case 1:
                            objProgram.inputManager.gyro_switch_on_angle_x = max(0.05, objProgram.inputManager.gyro_switch_on_angle_x - 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 2:
                            objProgram.inputManager.gyro_switch_on_angle_x = min(1, objProgram.inputManager.gyro_switch_on_angle_x + 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 3:
                            audio_play_sound(sndBeep,10,false);
                            slide_dir = false;
                            slide_timer = 30;
                            slide_to_state = 1004;
                            slide_to_cursor = 2;
                            slide_from_state = state;
                            break;
                    }
                }
                else
                {
                    switch(usedCursor)
                    {
                        case 1:
                            objProgram.inputManager.gyro_analog_start_x = max(0.05, objProgram.inputManager.gyro_analog_start_x - 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 2:
                            objProgram.inputManager.gyro_analog_start_x = min(1, objProgram.inputManager.gyro_analog_start_x + 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 3:
                            objProgram.inputManager.gyro_analog_end_x = max(0.05, objProgram.inputManager.gyro_analog_end_x - 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 4:
                            objProgram.inputManager.gyro_analog_end_x = min(1, objProgram.inputManager.gyro_analog_end_x + 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 5:
                            audio_play_sound(sndBeep,10,false);
                            slide_dir = false;
                            slide_timer = 30;
                            slide_to_state = 1004;
                            slide_to_cursor = 2;
                            slide_from_state = state;
                            break;
                    }
                }
                break;
            case 1006:
                if(!objProgram.inputManager.gyromode)
                {
                    switch(usedCursor)
                    {
                        case 1:
                            objProgram.inputManager.gyro_switch_on_angle_y = max(0.05, objProgram.inputManager.gyro_switch_on_angle_y - 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 2:
                            objProgram.inputManager.gyro_switch_on_angle_y = min(1, objProgram.inputManager.gyro_switch_on_angle_y + 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 3:
                            audio_play_sound(sndBeep,10,false);
                            slide_dir = false;
                            slide_timer = 30;
                            slide_to_state = 1004;
                            slide_to_cursor = 3;
                            slide_from_state = state;
                            break;
                    }
                }
                else
                {
                    switch(usedCursor)
                    {
                        case 1:
                            objProgram.inputManager.gyro_analog_start_y = max(0.05, objProgram.inputManager.gyro_analog_start_y - 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 2:
                            objProgram.inputManager.gyro_analog_start_y = min(1, objProgram.inputManager.gyro_analog_start_y + 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 3:
                            objProgram.inputManager.gyro_analog_end_y = max(0.05, objProgram.inputManager.gyro_analog_end_y - 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 4:
                            objProgram.inputManager.gyro_analog_end_y = min(1, objProgram.inputManager.gyro_analog_end_y + 0.05);
                            smartphone_save_configuration();
                            event_user(1);
                            break;
                        case 5:
                            audio_play_sound(sndBeep,10,false);
                            slide_dir = false;
                            slide_timer = 30;
                            slide_to_state = 1004;
                            slide_to_cursor = 4;
                            slide_from_state = state;
                            break;
                    }
                }
                break;
            case 1007:
                switch(usedCursor)
                {
                    case 1:
                        objProgram.inputManager.vkalpha = max(0.05, objProgram.inputManager.vkalpha - 0.05);
                        smartphone_save_configuration();
                        event_user(1);
                        break;
                    case 2:
                        objProgram.inputManager.vkalpha = min(1, objProgram.inputManager.vkalpha + 0.05);
                        smartphone_save_configuration();
                        event_user(1);
                        break;
                    case 3:
                        audio_play_sound(sndBeep,10,false);
                        slide_dir = false;
                        slide_timer = 30;
                        slide_to_state = 1001;
                        slide_to_cursor = 4;
                        slide_from_state = state;
                        break;
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init available options for every state - called by this object
event_inherited();
// just in case : deactivate virtual controls
smartphone_disable_virtual_keys();
// platform-specific options
show_vk_alpha = false;
simulate_options_count_for_y_offset = 0;
switch(state)
{
    case 7:
        // redefine the options menu
        large = true;
        var inputLabel = "TOUCHSCREEN";
        if(objProgram.inputManager.input == 1)
        {
            if(objProgram.inputManager.gamepad_update_enabled)
            {
                inputLabel = "GAMEPAD";
            }
            else
            {
                inputLabel = "KEYBOARD";
            }
        }
        var tallyLabel = "RANDOM DIGITS";
        switch(objProgram.score_tally_mode)
        {
            case 1:
                tallyLabel = "VARIABLE SPEED";
                break;
            case 2:
                tallyLabel = "CONSTANT SPEED";
                break;
        }
        options = false;
        options[0, OPTION_NAME] = 'OPTIONS';
        options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
        options[0, OPTION_VALUE] = '';
        options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[1, OPTION_NAME] = 'VIDEO OPTIONS';
        options[1, OPTION_TYPE] = OPTION_TYPE_SUBMENU;
        options[1, OPTION_VALUE] = 20;
        options[1, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        if(ANDROID_CONSOLE != 0)
        {
            options[2, OPTION_NAME] = 'MAP GAMEPAD';
            options[2, OPTION_TYPE] = OPTION_TYPE_SUBMENU;
            options[2, OPTION_VALUE] = 9;
            options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            options[3, OPTION_NAME] = 'BACK';
            options[3, OPTION_TYPE] = OPTION_TYPE_RETURN;
            options[3, OPTION_VALUE] = 0;
            options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        }
        else
        {
            options[2, OPTION_NAME] = 'INPUT METHOD';
            options[2, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[2, OPTION_VALUE] = inputLabel;
            options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            options[3, OPTION_NAME] = 'CONFIGURE TOUCHSCREEN';
            options[3, OPTION_TYPE] = OPTION_TYPE_SUBMENU;
            options[3, OPTION_VALUE] = 1001;
            options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            options[4, OPTION_NAME] = 'MAP KEYS';
            options[4, OPTION_TYPE] = OPTION_TYPE_SUBMENU;
            options[4, OPTION_VALUE] = 8;
            options[4, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            options[5, OPTION_NAME] = 'MAP GAMEPAD';
            options[5, OPTION_TYPE] = OPTION_TYPE_SUBMENU;
            options[5, OPTION_VALUE] = 9;
            options[5, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            options[6, OPTION_NAME] = 'BACK';
            options[6, OPTION_TYPE] = OPTION_TYPE_RETURN;
            options[6, OPTION_VALUE] = 0;
            options[6, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        }
        break;
    case 20:
        // Video options - added later, hence the ID
        
        large = true;
        
        var frameRateLabel = "60 FPS";
        switch get_30_fps() {
            case 1:
                frameRateLabel = "30 FPS";
            break;
        }
        
        var tallyLabel = "RANDOM DIGITS";
        switch(objProgram.score_tally_mode)
        {
            case 1:
                tallyLabel = "VARIABLE SPEED";
                break;
            case 2:
                tallyLabel = "CONSTANT SPEED";
                break;
        }
        options = false;
        options[0, OPTION_NAME] = 'VIDEO OPTIONS';
        options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
        options[0, OPTION_VALUE] = false;
        options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[1, OPTION_NAME] = 'FRAMERATE';
        options[1, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
        options[1, OPTION_VALUE] = frameRateLabel;
        options[1, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[2, OPTION_NAME] = 'SCORE TALLY MODE';
        options[2, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
        options[2, OPTION_VALUE] = tallyLabel;
        options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[3, OPTION_NAME] = 'BACK';
        options[3, OPTION_TYPE] = OPTION_TYPE_RETURN;
        options[3, OPTION_VALUE] = 7;
        options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        break;
    case 1001:
    
        var gyroLabel = 'D-PAD';
        if(objProgram.inputManager.gyroinss)
        {
            gyroLabel = 'GYROSCOPE';
        }
        var gyroGGLabel = 'D-PAD';
        if(objProgram.inputManager.gg_mode == 1)
        {
            gyroGGLabel = 'GYROSCOPE';
        }
        else
        if(objProgram.inputManager.gg_mode == 2)
        {
            gyroGGLabel = 'POINT ON SCREEN';
        }
        
    
        var dpadModeLabel = 'STATIC';
        if(objProgram.inputManager.dpadMode)
        {
            dpadModeLabel = 'DYNAMIC';
        }
        
        var dpadSizeLabel = 'LARGE';
        if(objProgram.inputManager.vksize == 1)
        {
            dpadSizeLabel = 'MEDIUM';
        }
        else
        if(objProgram.inputManager.vksize == 2)
        {
            dpadSizeLabel = 'SMALL';
        }
        var vkAlpha = string(round(objProgram.inputManager.vkalpha*100));
        
        // touchscreen configuration screen
        options[0, OPTION_NAME] = 'TOUCHSCREEN CONFIGURATION';
        options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
        options[0, OPTION_VALUE] = '';
        options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[1, OPTION_NAME] = 'REPOSITION BUTTONS';
        options[1, OPTION_TYPE] = OPTION_TYPE_SUBMENU;
        options[1, OPTION_VALUE] = 1002;
        options[1, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[2, OPTION_NAME] = 'BUTTON SIZE';
        options[2, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
        options[2, OPTION_VALUE] = dpadSizeLabel;
        options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[3, OPTION_NAME] = 'D PAD MODE';
        options[3, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
        options[3, OPTION_VALUE] = dpadModeLabel;
        options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[4, OPTION_NAME] = 'OPACITY';
        options[4, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
        options[4, OPTION_VALUE] = vkAlpha;
        options[4, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[5, OPTION_NAME] = 'SPECIAL STAGE CONTROLS';
        options[5, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
        options[5, OPTION_VALUE] = gyroLabel;
        options[5, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[6, OPTION_NAME] = 'FINAL ZONE CONTROLS';
        options[6, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
        options[6, OPTION_VALUE] = gyroGGLabel;
        options[6, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[7, OPTION_NAME] = 'CONFIGURE GYROSCOPE';
        options[7, OPTION_TYPE] = OPTION_TYPE_SUBMENU;
        options[7, OPTION_VALUE] = 1004;
        options[7, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[8, OPTION_NAME] = 'BACK';
        options[8, OPTION_TYPE] = OPTION_TYPE_RETURN;
        options[8, OPTION_VALUE] = 7;
        options[8, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        large = true;
        break;
    case 1002:
        options[0, OPTION_NAME] = 'REPOSITION BUTTONS#PRESS BACK TO CONFIRM OR CANCEL';
        options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
        options[0, OPTION_VALUE] = '';
        options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        substate = 0;
        //use_default_interface = false;
        simulate_options_count_for_y_offset = 7;
        break
    case 1003:
        options[0, OPTION_NAME] = 'REPOSITION BUTTONS';
        options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
        options[0, OPTION_VALUE] = '';
        options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[1, OPTION_NAME] = 'SAVE CHANGES';
        options[1, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
        options[1, OPTION_VALUE] = '';
        options[1, OPTION_ANIMATION] = OPTION_ANIMATION_LONGPRESS;
        options[2, OPTION_NAME] = 'DISCARD CHANGES';
        options[2, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
        options[2, OPTION_VALUE] = '';
        options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[3, OPTION_NAME] = 'RESTORE DEFAULT POSITIONS';
        options[3, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
        options[3, OPTION_VALUE] = '';
        options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        break
    case 1004:
        large = true;
        options[0, OPTION_NAME] = 'GYROSCOPE CONFIGURATION';
        options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
        options[0, OPTION_VALUE] = '';
        options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        if(!objProgram.inputManager.gyromode)
        {
            options[1, OPTION_NAME] = 'MODE';
            options[1, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[1, OPTION_VALUE] = 'SIMULATE BUTTON';
            options[1, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            var angle = round(objProgram.inputManager.gyro_switch_on_angle_x * 90);
            
            options[2, OPTION_NAME] = 'BUTTON PRESS ANGLE X';
            options[2, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[2, OPTION_VALUE] = string(angle);
            options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            var angle = round(objProgram.inputManager.gyro_switch_on_angle_y * 90);
            
            options[3, OPTION_NAME] = 'BUTTON PRESS ANGLE Y';
            options[3, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[3, OPTION_VALUE] = string(angle);
            options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            options[4, OPTION_NAME] = 'BACK';
            options[4, OPTION_TYPE] = OPTION_TYPE_RETURN;
            options[4, OPTION_VALUE] = 1001;
            options[4, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        }
        else
        {
            options[1, OPTION_NAME] = 'MODE';
            options[1, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[1, OPTION_VALUE] = 'PSEUDO ANALOG';
            options[1, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            var angle = round(objProgram.inputManager.gyro_analog_start_x * 90);
            
            options[2, OPTION_NAME] = 'MINIMUM ANGLE X';
            options[2, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[2, OPTION_VALUE] = string(angle);
            options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            var angle = round(objProgram.inputManager.gyro_analog_end_x * 90);
            
            options[3, OPTION_NAME] = 'MAXIMUM ANGLE X';
            options[3, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[3, OPTION_VALUE] = string(angle);
            options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            
            var angle = round(objProgram.inputManager.gyro_analog_start_y * 90);
            
            options[4, OPTION_NAME] = 'MINIMUM ANGLE Y';
            options[4, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[4, OPTION_VALUE] = string(angle);
            options[4, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            var angle = round(objProgram.inputManager.gyro_analog_end_y * 90);
            
            options[5, OPTION_NAME] = 'MAXIMUM ANGLE Y';
            options[5, OPTION_TYPE] = OPTION_TYPE_WITH_VALUE;
            options[5, OPTION_VALUE] = string(angle);
            options[5, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            options[6, OPTION_NAME] = 'BACK';
            options[6, OPTION_TYPE] = OPTION_TYPE_RETURN;
            options[6, OPTION_VALUE] = 1001;
            options[6, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        }
        simulate_options_count_for_y_offset = 10;
        break;
    case 1005:
    case 1006:
        if(!objProgram.inputManager.gyromode)
        {
            var angle, title;
            if(state == 1005)
            {
                angle = round(objProgram.inputManager.gyro_switch_on_angle_x * 90);
                title = 'BUTTON PRESS ANGLE X '+string(angle);
            }
            else
            {
                angle = round(objProgram.inputManager.gyro_switch_on_angle_y * 90);
                title = 'BUTTON PRESS ANGLE Y '+string(angle);
            }
            options[0, OPTION_NAME] = title;
            options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
            options[0, OPTION_VALUE] = '';
            options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        
            options[1, OPTION_NAME] = 'DECREASE VALUE';
            options[1, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
            options[1, OPTION_VALUE] = ' ANALOG';
            options[1, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        
            options[2, OPTION_NAME] = 'INCREASE VALUE';
            options[2, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
            options[2, OPTION_VALUE] = ' ANALOG';
            options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            options[3, OPTION_NAME] = 'BACK';
            options[3, OPTION_TYPE] = OPTION_TYPE_RETURN;
            options[3, OPTION_VALUE] = 1004;
            options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        }
        else
        {
            var angle, title;
            if(state == 1005)
            {
                var fangle = round(objProgram.inputManager.gyro_analog_start_x * 90);
                
                var tangle = round(objProgram.inputManager.gyro_analog_end_x * 90);
                angle = round(objProgram.inputManager.gyro_switch_on_angle_x * 90);
                title = 'TILT ANGLES X '+string(fangle)+' TO '+string(tangle);
            }
            else
            {
                var fangle = round(objProgram.inputManager.gyro_analog_start_y * 90);
                
                var tangle = round(objProgram.inputManager.gyro_analog_end_y * 90);
                angle = round(objProgram.inputManager.gyro_switch_on_angle_y * 90);
                title = 'TILT ANGLES Y '+string(fangle)+' TO '+string(tangle);
            }
            options[0, OPTION_NAME] = title;
            options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
            options[0, OPTION_VALUE] = '';
            options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        
            options[1, OPTION_NAME] = 'DECREASE MINIMUM ANGLE';
            options[1, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
            options[1, OPTION_VALUE] = ' ANALOG';
            options[1, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        
            options[2, OPTION_NAME] = 'INCREASE MINIMUM ANGLE';
            options[2, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
            options[2, OPTION_VALUE] = ' ANALOG';
            options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        
            options[3, OPTION_NAME] = 'DECREASE MAXIMUM ANGLE';
            options[3, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
            options[3, OPTION_VALUE] = ' ANALOG';
            options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        
            options[4, OPTION_NAME] = 'INCREASE MAXIMUM ANGLE';
            options[4, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
            options[4, OPTION_VALUE] = ' ANALOG';
            options[4, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
            
            options[5, OPTION_NAME] = 'BACK';
            options[5, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
            options[5, OPTION_VALUE] = '';
            options[5, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        }
        simulate_options_count_for_y_offset = 10;
        break;
    case 1007:
        var vkAlpha = round(objProgram.inputManager.vkalpha*100);
        
        // touchscreen configuration screen
        options[0, OPTION_NAME] = 'OPACITY '+string(vkAlpha);
        options[0, OPTION_TYPE] = OPTION_TYPE_TITLE;
        options[0, OPTION_VALUE] = '';
        options[0, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[1, OPTION_NAME] = 'DECREASE OPACITY';
        options[1, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
        options[1, OPTION_VALUE] = '';
        options[1, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[2, OPTION_NAME] = 'INCREASE OPACITY';
        options[2, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
        options[2, OPTION_VALUE] = '';
        options[2, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        options[3, OPTION_NAME] = 'BACK';
        options[3, OPTION_TYPE] = OPTION_TYPE_SIMPLE;
        options[3, OPTION_VALUE] = 7;
        options[3, OPTION_ANIMATION] = OPTION_ANIMATION_NONE;
        
        show_vk_alpha = true;
        
        break;
}

// recalculating the Y offset
max_cursor = array_height_2d(options) - 1;
if(simulate_options_count_for_y_offset)
{
    menu_y_offset = floor((view_hview[view_current] - 20 * simulate_options_count_for_y_offset)/2);
}
else
{
    menu_y_offset = floor((view_hview[view_current] - 20 * array_height_2d(options))/2);
}
gui_y_offset = menu_y_offset - 4;

// depending on whether the menu uses large or small length options,
// the touch zone is different as well
if(large)
{
    gui_x_offset = 43;
    gui_x_length = 340;
}
else
{
    gui_x_offset = 113;
    gui_x_length = 200;
}

if(state == 1002 || state == 1004 || state == 1005 || state == 1006)
{    
    // make use of this code to initialize some stuff we don't want to reinit for each frame draw
    dpadx = objProgram.inputManager.dpadx;
    dpady = objProgram.inputManager.dpady;
    bax = objProgram.inputManager.bax;
    bay = objProgram.inputManager.bay;
    bsx = objProgram.inputManager.bsx;
    bsy = objProgram.inputManager.bsy;
    bbx = objProgram.inputManager.bbx;
    bby = objProgram.inputManager.bby;
    vksize = objProgram.inputManager.vksize;
    
    // just for fun, make the dpad graphic depend on other options
    // if gyroscope in special stages is deactivated and dpad is static, show the dpad (1)
    // if gyroscope in special stages is activated and dpad is dynamic, show the UP button (2)
    // else, show a combination of the two (0)
    dpadgraphic = 0;
    if((!objProgram.inputManager.gyroinss) &amp;&amp; (!objProgram.inputManager.dpadMode))
    {
        dpadgraphic = 1;
    }
    else
    if(objProgram.inputManager.gyroinss &amp;&amp; objProgram.inputManager.dpadMode)
    {
        dpadgraphic = 2;
    }
    
    switch(vksize)
    {
        case 0:
            dpadRadius = 32;
            switch(dpadgraphic)
            {
                case 0:
                    dpadSprite = sprTouchscreenDPadTemplate;
                    break;
                case 1:
                    dpadSprite = sprTouchscreenDPadBase;
                    break;
                case 2:
                    dpadSprite = sprTouchscreenRunButton;
                    break;
            }
            buttonSprite = sprTouchscreenButton;
            break;
        case 1:
            dpadRadius = 24;
            switch(dpadgraphic)
            {
                case 0:
                    dpadSprite = sprTouchscreenDPadTemplateMed;
                    break;
                case 1:
                    dpadSprite = sprTouchscreenDPadBaseMed;
                    break;
                case 2:
                    dpadSprite = sprTouchscreenRunButtonMed;
                    break;
            }
            buttonSprite = sprTouchscreenButtonMed;
            break;
        case 2:
            dpadRadius = 16;
            switch(dpadgraphic)
            {
                case 0:
                    dpadSprite = sprTouchscreenDPadTemplateSmall;
                    break;
                case 1:
                    dpadSprite = sprTouchscreenDPadBaseSmall;
                    break;
                case 2:
                    dpadSprite = sprTouchscreenRunButtonSmall;
                    break;
            }
            buttonSprite = sprTouchscreenButtonSmall;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// step - called by parent object

event_inherited();
if((ANDROID_CONSOLE == 0) &amp;&amp; active)
{   
    if(wait_for_release_click)
    {
        if(device_mouse_check_button_released(0, mb_left))
        {
            wait_for_release_click = false;
        }
    }
    else
    {
        if(use_default_interface &amp;&amp; allow_input)
        {
            if(device_mouse_check_button_pressed(0, mb_left))
            {
                var clickGuiX = device_mouse_x_to_gui(0);
                var clickGuiY = device_mouse_y_to_gui(0);
                
                if(clickGuiX &gt;= gui_x_offset &amp;&amp; clickGuiX &lt;= gui_x_offset + gui_x_length)
                {
                    if(clickGuiY &gt;= gui_y_offset)
                    {
                        var tmp_cursor = floor((clickGuiY - gui_y_offset)/20);
                        if(tmp_cursor &lt;= max_cursor)
                        {
                            if (cursor != 0 || options[0, OPTION_TYPE] != OPTION_TYPE_TITLE)
                            {
                                cursor = tmp_cursor;
                                event_user(5);
                            }
                        }
                    }
                }
            }
            if(state == 1002)
            {
                // we are drag and dropping buttons here
                var currentlyDragging = device_dragging[0] || device_dragging[1] || device_dragging[2] || device_dragging[3] || device_dragging[4];
                
                // allow to drag multiple buttons at once
                // 0 - not dragging, 1 - dpad, 2 - jump button, 3 - pause button, 4 - super button
                var device = 0;
                if(device_dragging[device] &gt; 0)
                {
                    if(device_mouse_check_button(device, mb_any))
                    {
                        if(device_dragging[device] == 1)
                        {
                            dpadx = device_mouse_x_to_gui(device) - device_xoffset[device];
                            dpady = device_mouse_y_to_gui(device) - device_yoffset[device];
                        }
                        else
                        if(device_dragging[device] == 2)
                        {
                            bax = device_mouse_x_to_gui(device) - device_xoffset[device];
                            bay = device_mouse_y_to_gui(device) - device_yoffset[device];
                        }
                        else
                        if(device_dragging[device] == 3)
                        {
                            bsx = device_mouse_x_to_gui(device) - device_xoffset[device];
                            bsy = device_mouse_y_to_gui(device) - device_yoffset[device];
                        }
                        else
                        if(device_dragging[device] == 4)
                        {
                            bbx = device_mouse_x_to_gui(device) - device_xoffset[device];
                            bby = device_mouse_y_to_gui(device) - device_yoffset[device];
                        }
                    }
                    else
                    {
                        device_dragging[device] = 0;
                    }
                }
                else
                {
                    if(device_mouse_check_button_pressed(device, mb_any))
                    {
                        // are we clicking on a button?
                        var clickx = device_mouse_x_to_gui(device);
                        var clicky = device_mouse_y_to_gui(device);
                        var found = 0;
                        var xoffset = 0;
                        var yoffset = 0;
                        if(point_in_circle(clickx, clicky, dpadx, dpady, dpadRadius))
                        {
                            // we are current moving the dpad
                            xoffset = clickx - dpadx;
                            yoffset = clicky - dpady;
                            found = 1;
                        }
                        else
                        if(point_in_circle(clickx, clicky, bax, bay, dpadRadius))
                        {
                            // we are current moving the jump button
                            xoffset = clickx - bax;
                            yoffset = clicky - bay;
                            found = 2;
                        }
                        else
                        if(point_in_rectangle(clickx, clicky, bsx, bsy, bsx + 24, bsy + 24))
                        {
                            // we are current moving the pause button
                            xoffset = clickx - bsx;
                            yoffset = clicky - bsy;
                            found = 3;
                        }
                        else
                        if(point_in_rectangle(clickx, clicky, bbx, bby, bbx + 24, bby + 24))
                        {
                            // we are current moving the super button
                            xoffset = clickx - bbx;
                            yoffset = clicky - bby;
                            found = 4;
                        }
                        // is any other device already moving this button?
                        for(var i = 0; i &lt;= 4;i++)
                        {
                            if(device == i)
                            {
                                continue;
                            }
                            if(found == device_dragging[device])
                            {
                                found = 0;
                            }
                        }
                        device_dragging[device] = found;
                        device_xoffset[device] = xoffset;
                        device_yoffset[device] = yoffset;
                    }
                }
                
                if(!currentlyDragging)
                {
                    if(keyboard_check_pressed(objProgram.back_button))
                    {
                       audio_play_sound(sndBeep,10,false);
                        slide_dir = true;
                        slide_timer = 30;
                        slide_to_state = 1003;
                        slide_to_cursor = 0;
                        slide_from_state = state;
                    }
                }
            }
            if(state == 1004 || state == 1005 || state == 1006)
            {
                var clicking = false;
                for (var device = 0; device &lt;= 4; device++)
                {                                   
                    if(device_mouse_check_button(device, mb_any))
                    {
                        var clickx = device_mouse_x_to_gui(device);
                        var clicky = device_mouse_y_to_gui(device);
                        
                        if(point_in_circle(clickx, clicky, bax, bay, dpadRadius))
                        {
                           clicking = true;
                           break;
                        }
                    }
                }    
                objProgram.inputManager.gyro_origin_is_set = clicking;
            }
            else
            {
                objProgram.inputManager.gyro_origin_is_set = false;
            }
        }
        else
        if(allow_input)
        {
            if(state == 11)
            {
                if(device_mouse_check_button_pressed(0, mb_left))
                {
                    var clickGuiX = device_mouse_x_to_gui(0);
                    var clickGuiY = device_mouse_y_to_gui(0);
                    
                    if(point_in_rectangle(clickGuiX, clickGuiY, 96 - 32, 112 - 32, 96 + 32, 112 + 32))
                    {
                        cursor = 8;
                        event_user(5);
                    }
                    else
                    if(point_in_rectangle(clickGuiX, clickGuiY, 216 - 32, 112 - 32, 216 + 32, 112 + 32))
                    {
                        cursor = 9;
                        event_user(5);
                    }
                    else
                    if(point_in_rectangle(clickGuiX, clickGuiY, 336 - 32, 112 - 32, 336 + 32, 112 + 32))
                    {
                        cursor = 10;
                        event_user(5);
                    }
                    else
                    if(clickGuiX &gt;= gui_x_offset &amp;&amp; clickGuiX &lt;= gui_x_offset + gui_x_length)
                    {
                        if(clickGuiY &gt;= gui_y_offset)
                        {
                            var tmp_cursor = floor((clickGuiY - gui_y_offset)/20);
                            if(tmp_cursor &lt;= max_cursor)
                            {
                                if (options[tmp_cursor, OPTION_TYPE] == OPTION_TYPE_RETURN)
                                {
                                    cursor = tmp_cursor;
                                    event_user(5);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if(show_vk_alpha)
    {
        if(state == 1001)
        {
            if(cursor != 4)
            {
                show_vk_alpha = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
