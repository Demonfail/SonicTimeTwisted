<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>objInputMethodDependant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize input device
image_speed = 0;
var i;
// input flags - outside of this object, use set_input_enabled to change this flag
flag_player_input = true;
pressingGamepad = -1;
// computer controls
computer_input_setup();
// input id
device_id = instance_number(objInput)-1;
// input state
state = 0;
previous_state = 0;
state_press = 0;
state_release = 0;
// axes
x_axis = 0;
y_axis = 0;
badAxis = 0;
pad = -1;
button_count = 0;
axis_count = 0;
// input stream
stream = -1;
stream_size = $FF;
input_load();
fix_bad_gamepad_axis();

// rumble/haptics
rumble_queue = ds_queue_create();
rumble_configuration_script = rumble_configuration_active;

// input devices management
input_init_script = input_method_dummy_script;
input_manage_script = input_method_dummy_script;
input_rumble_script = input_method_dummy_script;
input_draw_script = input_method_dummy_script;
input_init_script_fallback = input_method_dummy_script;
input_manage_script_fallback = input_method_dummy_script;
input_rumble_script_fallback = input_method_dummy_script;
input_draw_script_fallback = input_method_dummy_script;
input_method = 0;
input_method_fallback = 0;
use_fallback = false;

/**
 * touchscreen-specific variables
 */
/// Made a separate script to be called conditionally because of the sheer number of variables
smartphone_controls_enabled = false;

// Regular touchscreen controls
vkalpha = 0.8; // alpha
vksize = 0; // 0 - big controls, 1 - medium controls, 2 - small controls
dpadmode = 0; // 0 - static, 1 - dynamic

// direction pad coordinates - saved in file
dpadx = 64;
dpady = 178;

// direction pad current coordinates - relevant when using dynamic D-Pad
current_dpadx = 64;
current_dpady = 178;

// josytick current position - as drawn
joyx = dpadx;
joyy = dpady;

// sprites for the joystick and run &amp; jump buttons, which vary from size to size
dpad_base_sprite = sprTouchscreenDPadBaseBig;
dpad_joystick_sprite = sprTouchscreenDPadJoyBig;
dpad_jumpbutton_sprite = sprTouchscreenButtonBig;

// A button coordinates
bax = 364;
bay = 178;

// direction pad &amp; A button radius
bar = 32;

// Start button coordinates
bsx = 200;
bsy = 16;

// Super button coordinates
bbx = 324;
bby = 88;
super_button_enabled = false;

button_radius = 0; // derived from vksize

// Gyroscope for special stages
gyroinss = 1; // 0 - use d-pad to turn, 1 - use gyroscope
gyromode = 1; // 0 - gyroscope simply turns the buttons on and off; 1 - pseudo-analog mode
gyro_switch_on_angle_x = 0.15; // angle on which the button is pressed
gyro_analog_start_x = 0.05; // angle from which the analog control starts
gyro_analog_end_x = 0.5; // angle to which the analog control goes

// Special scheme for Galacnik Gauntlet
gg_mode = 1; // 0 - use d-pad and button, 1 - point on screen

// On start, the controls are invisible
image_alpha = 0;

// subscript for managing gyroscope in special stages
input_gyro_script = input_method_dummy_script;

// special counter for the analog mode for gyroscope in special stages
gyro_counter = 0;

/**
 * touchscreen-specific variables end
 */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_queue_destroy(rumble_queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>counter for pressing gamepad buttons</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>computer_input_reset_state();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update states

// clear states
previous_state = state;
state = 0;
state_press = 0;
state_release = 0;

script_execute(input_manage_script);
if(use_fallback)
{
    // only in menus
    script_execute(input_manage_script_fallback);
}

// default "back" button - ESC on PC, Back on smartphones
// calls the menu, guaranteed to be available on every platform
if(keyboard_check(DEVICE_BACK_BUTTON))
{
    state |= cBACK;
}
// axes
x_axis = 0;
if (state &amp; cLEFT &amp;&amp; flag_player_input) || (computer_cLEFT &amp;&amp; !flag_player_input) x_axis -= 1;
if (state &amp; cRIGHT &amp;&amp; flag_player_input) || (computer_cRIGHT &amp;&amp; !flag_player_input) x_axis += 1;
y_axis = 0;
if (state &amp; cUP &amp;&amp; flag_player_input) || (computer_cUP &amp;&amp; !flag_player_input) y_axis -= 1;
if (state &amp; cDOWN &amp;&amp; flag_player_input) || (computer_cDOWN &amp;&amp; !flag_player_input) y_axis += 1;

// pressing and releasing
state_press = (state &amp; previous_state) ^ state;
state_release = (state &amp; previous_state) ^ previous_state;
previous_state = state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage rumble/haptic
script_execute(input_rumble_script);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect gamepads
switch (async_load[?"event_type"]) {
case "gamepad discovered":
    var index = async_load[?"pad_index"];
    if (pad == -1) {
        pad = index;
    }
    break;
case "gamepad lost":
    var index = async_load[?"pad_index"];
    if (pad == index) {
        pad = -1;
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete input stream
if stream ds_list_destroy(stream);
stream = -1;
computer_input_reset_state();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create input stream
reinit_input_method();
stream = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rerun input init script: necessary for smartphone, transparent for PC
script_execute(input_init_script);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Disable smartphone controls until they are explicitly enabled
set_smartphone_controls_enabled(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enable fallback controls unconditionally on certain maps: title screen, save screen
switch(room)
{
    case titlescreen:
    case saveSelect:
        use_fallback = true;
        break;
    default:
        use_fallback = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(input_draw_script);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
