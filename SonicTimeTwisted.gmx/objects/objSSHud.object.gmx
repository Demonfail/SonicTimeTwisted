<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1026</depth>
  <persistent>0</persistent>
  <parentName>objInputMethodDependant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// character id(s)
character_id[0] = max(objGameData.character_id[0]-1, 0);
character_id[1] = max(objGameData.character_id[1]-1, 0);
image_speed =0;
// time stamp
time_stamp = "";
progsurface = noone;
pauseOffset = 0;
pauseState = 0;
controlState = 0;
axis = "";
inputFlash = 0;
white = 0;
timeOffset = 0;
timer = 0;
rings = 0;
menu = instance_create(0,0,objMenu);
draw_lives_script = draw_lives_default;
draw_shield_script = draw_shield_ss_default;
if(is_touchscreen)
{
    draw_lives_script = draw_lives_touchscreen;
    draw_shield_script = draw_shield_ss_touchscreen;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pause menu end step
if objProgram.paused || menu.menu_type == 2 {
    if allowInput &amp;&amp; menu.state != 0 {
        with(menu) event_user(2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>objScreen.image_index div 8</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update timer string
var total_time, minutes, seconds, milliseconds;
    // total time
    total_time = min(36000-objSSLevel.timer, 36000);
    if total_time &gt;= 36000 {
        timeOffset = - 10;
    }
    
    // minutes
    minutes = string(total_time div 3600);
// seconds
seconds = (total_time div 60) mod 60;
if (seconds&lt;10) seconds = "0"+string(seconds); else
seconds = string(seconds);
// milliseconds
milliseconds = ceil((total_time mod 60)/0.60);
if (milliseconds&lt;10) milliseconds = "0"+string(milliseconds); else
milliseconds = string(milliseconds);
// update time stamp
time_stamp = minutes+"'"+seconds+'"'+milliseconds;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pause menu begin step
if objProgram.paused || menu.menu_type == 2 {
    if allowInput &amp;&amp; menu.state != 0 {
        with(menu) event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// flash for key mapper
if inputFlash &lt; 1
    inputFlash += .25;
    else inputFlash = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fade white for pause
if objProgram.paused {
    if white &lt; 0.5
        white+=.125;
    else white = 0.5;
} else if white &gt; 0 {
    white-=.125;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause Menu
if objProgram.paused {
    // if there's already a menu being displayed (failure screen) - don't pause
    // otherwise it locks the game
    if(menu.state != 0 &amp;&amp; menu.action_script == menu_part_sstage_loss_actions)
    {
        objProgram.paused = false;
        game_pause(objProgram.paused);
    }
    if allowInput {
        // allow the menu object to handle everything
        if(menu.state == 0)
        {
            with(menu) menu_fn_open_menu(menu_part_zone_items, true);
        }
    }
    
}
if(menu.state != 0)
{
    with(menu) event_user(0);
}

if objProgram.inputManager.pressingGamepad == -1 {
    allowInput = true;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw lives - touchscreen variant

if(objProgram.saveSlot &gt; -1) // if we are playing this in the mini-game/level select mode, lives don't appear
{
    draw_lives_touchscreen(0, 0);
}
else
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
}
// Progress bar
var pbOffsetX = 72;
var pbOffsetY = 80;

draw_set_alpha(0.25);
draw_set_color(c_white);
draw_line_width(pbOffsetX, pbOffsetY, pbOffsetX+282, pbOffsetY, 4);
draw_set_alpha(1);

var xmetalprog = 128 + objSSMetalSonic.progress * 280;
if metalProgDisplay &gt; xmetalprog +2{
    metalProgDisplay-=2;
}
else if metalProgDisplay &lt; xmetalprog -2 {
    metalProgDisplay+=2;
}

var xplayerprog = 128 + objSSPlayer.progress * 280;
if playerProgDisplay &gt; xplayerprog +2{
    playerProgDisplay-=2;
}
else if playerProgDisplay &lt; xplayerprog -2{
    playerProgDisplay+=2;
}
draw_sprite_ext(sprRacerIcon, 3, pbOffsetX + objSSMetalSonic.progress * 280, pbOffsetY, 1, 1, 0, c_white, 1);
draw_sprite(sprRacerIcon, objGameData.character_id[0]-1, pbOffsetX + objSSPlayer.progress * 280, pbOffsetY);
//draw_sprite_ext(sprRacerIcon, 3, metalProgDisplay, 224, 1, 1, 0, c_white, 1);
//draw_sprite(sprRacerIcon, objGameData.character_id[0]-1, playerProgDisplay, 224);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw lives - normal variant
var pbOffsetX = 128;
if(objProgram.saveSlot &gt; -1) // if we are playing this in the mini-game/level select mode, lives don't appear
{
    // lives setpiece
    draw_sprite(sprLives, character_id[view_current], 16, view_hview-24);
    
    // lives string
    draw_set_color(c_white);
    draw_set_alpha(image_alpha);
    draw_set_font(objResources.fontLives);
    draw_set_halign(fa_left);
    
    // draw character name.
    var drawname = tr("_charname_" + string(character_id[view_current]));
    draw_text_colour(16 + 32, view_hview - 24 + 4, drawname, c_yellow, c_yellow, c_white, c_white, 1);
    
    // make lives string.
    var drawstring = "";
    if (objGameData.player_lives[view_current] &gt;= 10) drawstring = string(objGameData.player_lives[view_current]);
    else drawstring = " " + string(objGameData.player_lives[view_current]);
    
    draw_text(16 + 32, view_hview - 24 + 4, chr(10) + "  x" + drawstring);
}
else
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    pbOffsetX = 72;
}
// Progress bar
draw_set_alpha(0.25);
draw_set_color(c_white);
draw_line_width(pbOffsetX, 224, pbOffsetX + 282, 224, 4);
draw_set_alpha(1);
var xmetalprog = pbOffsetX + objSSMetalSonic.progress * 280;
if metalProgDisplay &gt; xmetalprog +2{
    metalProgDisplay-=2;
}
else if metalProgDisplay &lt; xmetalprog -2 {
    metalProgDisplay+=2;
}
var xplayerprog = pbOffsetX + objSSPlayer.progress * 280;
if playerProgDisplay &gt; xplayerprog +2{
    playerProgDisplay-=2;
}
else if playerProgDisplay &lt; xplayerprog -2{
    playerProgDisplay+=2;
}
draw_sprite_ext(sprRacerIcon, 3, pbOffsetX + objSSMetalSonic.progress * 280, 224, 1, 1, 0, c_white, 1);
draw_sprite(sprRacerIcon, objGameData.character_id[0]-1, pbOffsetX + objSSPlayer.progress * 280, 224);
//draw_sprite_ext(sprRacerIcon, 3, metalProgDisplay, 224, 1, 1, 0, c_white, 1);
//draw_sprite(sprRacerIcon, objGameData.character_id[0]-1, playerProgDisplay, 224);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>metalProgDisplay =128 + objSSMetalSonic.progress * 280;
playerProgDisplay=128 + objSSPlayer.progress * 280;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Hud
//if objScreen.paused exit;
d3d_set_projection_ortho(0, 0, view_wport, view_hport, 0);
// score / time / rings string
draw_set_font(objResources.fontHud);
if !objProgram.paused {
draw_top_hud(objSSLevel.timer, objSSPlayer.rings, 0, 0, draw_shield_ss, objProgram.temp_shield);
draw_top_hud(objSSLevel.timer, objSSPlayer.rings, 0, 0, draw_shield_script, objProgram.temp_shield);
} else {
    draw_set_color(c_black);
    draw_rectangle(0,0,426,240,false);
    draw_set_color(c_white);
}
if(menu.state != 0)
{
    with(menu) event_user(4);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
