<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rolled = false;
lines = false;

lines[0, 0] = tr("Game by");
lines[0, 1] = tr('Bryce Stock "Overbound"');

lines[1, 0] = tr("Programmed by");
lines[1, 1] = tr('Bryce Stock "Overbound"');
lines[1, 2] = tr('Devin Reeves "Mercury"');
lines[1, 3] = tr('Joevan Salmon-Johnson "VectorSatyr"');

lines[2, 0] = tr("Game Art by");
lines[2, 1] = tr('Bryce Stock "Overbound"');
lines[2, 2] = tr('Marc "DerZocker"');

lines[3, 0] = tr("Music by");
lines[3, 1] = tr('Hinchy');

lines[4, 0] = tr("Level Design by");
lines[4, 1] = tr('Bryce Stock "Overbound"');
lines[4, 2] = tr('Shane "Sparks"');

lines[5, 0] = tr("Concepts from");
lines[5, 1] = tr('Bryce Stock "Overbound"');
lines[5, 2] = tr('Debra Ann');
lines[5, 3] = tr('Devin Reeves "Mercury"');
lines[5, 4] = tr('Hinchy');
lines[5, 5] = tr('Joevan Salmon-Johnson "VectorSatyr"');
lines[5, 6] = tr('Jonathan Rose "Dimension Warped"');
lines[5, 7] = tr('Shane "Sparks"');
lines[5, 8] = tr('"Tommy C"');

lines[6, 0] = tr("Additional Programming by");
lines[6, 1] = tr('Alex Khayrullin');
lines[6, 2] = tr('Jonathan Rose "Dimension Warped"');
lines[6, 3] = tr('Hector Barreiro "Damizean"');
lines[6, 4] = tr('Will "Polar Exelion"');

lines[7, 0] = tr("Additional Music by");
lines[7, 1] = tr('Andy Tunstall');
lines[7, 2] = tr('Christopher Wright "LarkSS"');
lines[7, 3] = tr('Jameson Sutton');
lines[7, 4] = tr('Joshua Kruszyna "EXShad"');

lines[8, 0] = tr("Additional Art by");
lines[8, 1] = tr('Alex Khayrullin');
lines[8, 2] = tr('"Andrew75"');
lines[8, 3] = tr('Andy Tunstall');
lines[8, 4] = tr('"Apricity"');
lines[8, 5] = tr('"BlazefireLP"');
lines[8, 6] = tr('Devin Reeves "Mercury"');
lines[8, 7] = tr('"GameNerd Advance"');
lines[8, 8] = tr('"Hyper Emerson"');
lines[8, 9] = tr('"Kamon62"');
lines[8, 10] = tr('Pepijn Ryngaert "Gardow"');
lines[8, 11] = tr('Shane "Sparks"');
lines[8, 12] = tr('"SonicGenesis89"');
lines[8, 13] = tr('Stephen DiDuro "Strife"');
lines[8, 14] = tr('"Stevingesus"');
lines[8, 15] = tr('"Vexer"');

lines[9, 0] = tr("Resources from");
lines[9, 1] = tr('Sonic Fan Games HQ');
lines[9, 2] = tr('Sonic Retro');
lines[9, 3] = tr('The Spriters Resource');
lines[9, 4] = tr('The Mystical Forest Zone');
lines[9, 5] = tr('Toei Animation');

lines[10, 0] = tr("Special Thanks");
lines[10, 1] = tr('Damizean');
lines[10, 2] = tr('Ricardo Elso');
lines[10, 3] = tr('Rael');
lines[10, 4] = tr('Flare');
lines[10, 5] = tr('Shard');
lines[10, 6] = tr('Icuurd8b42');
lines[10, 7] = tr('Chimpo');
lines[10, 8] = tr('RogueYoshi');
lines[10, 9] = tr('TheouAegis');
lines[10, 10] = tr('Sega Scourge');
lines[10, 11] = tr('Slingerland');
lines[10, 12] = tr('Andrew75');
lines[10, 13] = tr('SuperBliz');
lines[10, 14] = tr('Debra Ann');
lines[10, 15] = tr('Joe Pierce');
lines[10, 16] = tr('Noah Copeland');

// the array above is designed to be easy to edit, now we're converting it to the format we'll actually use
event_user(0);

// calculating the speed and width of the credits
// We're cheating a bit: we know that a letter with the standard font is 9 pixels wide
var width = 0;
lines_count = array_length_1d(lines)+ 8;
for(var i = 0; i &lt; array_length_1d(lines); i++)
{
    width = max(width, 1+8*string_length(lines[i]));
}
center_offset = (width div 2);
cursor = 0;
displayed_label = false;
displayed_label_is_title = false;
for(var i = 0; i &lt; 7; i++)
{
    displayed_label[i] = '';
    displayed_label_is_title[i] = false;
}

// in the first released version, the credits lasted for 4200 seconds
alarm_delay = round(4200/lines_count);
// should be a multiple of 18, otherwise credits will visibly skip pixels
alarm_delay = round(alarm_delay/18)*18;

alarm[0] = alarm_delay;
// add an empty screen
lines_count += array_length_1d(displayed_label);
// the length of the credits is 4200 frames, or 70 seconds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// updating the displayed part of the credits
if(cursor &lt; lines_count)
{
    for(var i = 0; i &lt; 6; i++)
    {
        displayed_label[i] = displayed_label[i+1];
        displayed_label_is_title[i] = displayed_label_is_title[i+1];
    }
    var new_row_value = '';
    if(cursor &lt; array_length_1d(lines))
    {
        if(cursor &lt; array_length_1d(lines))
        {
            new_row_value = lines[cursor];
        }
        else
        {
            new_row_value = '';
        }
        
    }
    
    if((string_copy(new_row_value, 1, 3) == '***') &amp;&amp;
        (string_copy(new_row_value, string_length(new_row_value) - 2, 3) == '***')
    )
    {
        new_row_value = string_copy(new_row_value, 4, string_length(new_row_value) - 6);
        displayed_label_is_title[6] = true;
    }
    else
    {
        displayed_label_is_title[6] = false;
    }
    displayed_label[6] = new_row_value;
    cursor++;
    alarm[0] = alarm_delay;
}
else
{
    rolled = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reorganizing the array - called in Create event
var flat_credits_content = false;

var first = true;
var row_is_title = true;
var index = 0;

for(var i = 0; i &lt; array_height_2d(lines); i++)
{
    if(!first)
    {
        flat_credits_content[index] = '';
        index++;
        /*
        flat_credits_content[index] = '';
        index++;
        */
    }
    else
    {
        first = false;
    }
    row_is_title = true;
    for(var j = 0; j &lt; array_length_2d(lines, i); j++)
    {
        if(row_is_title)
        {
            flat_credits_content[index] = '***'+lines[i,j]+'***';
            index++;
            /*
            flat_credits_content[index] = '';
            index++;
            */
            row_is_title = false;
        }
        else
        {
            flat_credits_content[index] = lines[i,j];
            index++;
        }
    }
}
lines = flat_credits_content;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!rolled)
{
    draw_set_color(c_white);
    draw_set_valign(fa_top);
    draw_set_halign(fa_center);
    draw_set_font(objResources.fontHud);
    
    var y_offset = view_yview[view_current] - 18 + (18 * alarm[0] / alarm_delay);
    for(var i = 0; i &lt; 7; i++)
    {
        var text_alpha = 1;
        if(i == 6)
        {
            text_alpha = (alarm_delay - alarm[0]) / alarm_delay;
        }
        if(displayed_label_is_title[i])
        {
            draw_set_font(objResources.fontHud);
            draw_text_colour(view_xview[view_current] + center_offset, y_offset + i*18, displayed_label[i],c_white,c_white,c_yellow,c_yellow,text_alpha);
        }
        else
        {
            draw_set_font(objResources.fontHudMin);
            draw_text_colour(view_xview[view_current] + center_offset, y_offset + i*18, displayed_label[i],c_white,c_white,c_gray,c_gray,text_alpha);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
